class DealDamages {
    source: Character,
    target: Character,
    amount: int,

    has_target(object: Object) -> bool {
        self.target == object
    }

    trigger() {
        self.target.health -= self.amount;
    }
}

class Log {
    @DealDamages[100] {
        @log(`${evt.source.name} has dealt ${evt.amount} damages to ${evt.target.name}`);
    }

    @DealDamages[-100] {
        @log(`${evt.source.name} prepares to deal ${evt.amount} damages to ${evt.target.name}`);
    }
}

class Character {
    name: string,
    health: int = 100,
    total_damages_received: int = 0,
    total_damages_dealt: int = 0

    $DealDamages {
        self.total_damages_received += evt.amount;
    }

    @DealDamages[50] {
        check evt.source == self;

        self.total_damages_dealt += evt.amount;
    }
}

class Attacker extends Character {
    @DealDamages[-1] {
        check evt.source == self;

        evt.amount *= 2;
    }
}

export fn main() {
    let attacker = Attacker { name: "attacker" };
    let defender = Character { name: "defender" };
    let evt1 = DealDamages {
        source: attacker,
        target: defender,
        amount: 10
    };
    let evt2 = DealDamages {
        source: defender,
        target: attacker,
        amount: 5
    };
    let entities = [Log, attacker, defender];

    evt1.emit(entities);
    evt2.emit(entities);

    @dbg(attacker);
    @dbg(defender);
}