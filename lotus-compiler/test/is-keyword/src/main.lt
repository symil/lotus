class A { foo : int }
class B extends A { bar: string }

export fn main() {
    let a = A { foo: 4 };
    let b = B { foo: 8, bar: "hello" };

    test(a);
    @log("---");
    test(b);
    @log("---");

    let maybe : A = test_params(b);
    @log("---");
    let maybe : B = test_params(a);

    @assert(#LINE, (4 is int(v)));
    @assert(#LINE, !(4 is string(v)));

    @log("---");
    are_same_type(4, 2);
    are_same_type(4, false);
}

fn test(obj: Object) {
    if obj is Object(o) {
        @log("Object");
    }

    if obj is A(a) {
        @log("A: " + a.foo.to_string());
    }

    if obj is B(b) {
        @log("B: " + b.bar);
    }
}

fn test_params<T : Object>(value: Object) -> T? {
    if value is T(casted) {
        @log(`value is a ${T::__type_name()}`);
        casted
    } else {
        @log(`value is not a ${T::__type_name()}`);
        none
    }
}

fn are_same_type<T, U>(v1: T, v2: U) {
    if v1 is U(v) {
        @log(`${v1} has the same type as ${v2}`);
    } else {
        @log(`${v1} has not the same type as ${v2}`);
    }
}