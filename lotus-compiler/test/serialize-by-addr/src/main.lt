class A { a: int }
class B extends A { b: float }
class C extends B { c: string }

class Test {
    list: Object[],
    link: Object?,
    other: Object?
}

export fn main() {
    let input_value = Test {
        list: [
            A { a: 5 },
            B { a: 8, b: 1.2f },
            C { a: 8, b: 1.2f, c: "hello" },
        ]
    };
    input_value.link = input_value.list[2];

    // Object serialization should properly work in the general case
    let server_bytes = @serialize(input_value, Buffer).consume();
    let client_deserialization_buffer = Buffer::from_array(server_bytes);
    let client_value = Test::__deserialize(client_deserialization_buffer);
    @log(client_value == input_value); // should be false
    @dbg(client_value);
    @log("---");

    // Referencing a server object by its address from the client should work if the server's object version matches the one sent by the client
    let client_serialization_buffer_1 = Buffer::new();
    client_serialization_buffer_1.set_local_object_to_remote_addr_map(client_deserialization_buffer.get_local_object_to_remote_addr_map());
    Test::__serialize(client_serialization_buffer_1, client_value);
    let server_value_1 : Test = @deserialize(client_serialization_buffer_1);
    @log(server_value_1 == input_value); // should be true
    @dbg(server_value_1);
    @log("---");

    // Server should recreate objects that are not references by their address
    let client_serialization_buffer_2 = Buffer::new();
    Test::__serialize(client_serialization_buffer_2, client_value);
    let server_value_2 : Test = @deserialize(client_serialization_buffer_2);
    @log(server_value_2 == input_value); // should be false
    @dbg(server_value_2);
    @log("---");

    // Server should receive `none` if the object referenced by the client exists but with a different version
    let client_serialization_buffer_3 = Buffer::new();
    client_serialization_buffer_3.set_local_object_to_remote_addr_map(client_deserialization_buffer.get_local_object_to_remote_addr_map());
    Test::__serialize(client_serialization_buffer_3, client_value);
    input_value.__as_ptr().__set_version(-42);
    let server_value_3 : Test = @deserialize(client_serialization_buffer_3);
    @log(server_value_3 == input_value); // should be false
    @dbg(server_value_3); // should be none
}