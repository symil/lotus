export fn main() {
    let c1 = @get_memory_usage();

    let a = "hello";
    let b = " world"
    let c = "!";
    let f = () => @log(a + b + c);

    let p = f as ptr;
    let m = p[0] as Map<int, Pointer<string>>;
    let array = [f];

    let c2 = @get_memory_usage();
    @retain(array);
    @trigger_garbage_collection();
    let c3 = @get_memory_usage();
    @retain(array);
    @trigger_garbage_collection();
    let c4 = @get_memory_usage();

    @assert(#LINE, p[-1] == 1);
    @assert(#LINE, (m as ptr)[-1] == 1);
    @assert(#LINE, m.hash_table.as_ptr()[-1] == 1);
    @assert(#LINE, m.data_table.as_ptr()[-1] == 1);

    for entry in m.data_table {
        @assert(#LINE, (entry as ptr)[-1] == 1);
        @assert(#LINE, (entry.value[0] as ptr)[-1] == 1);
        @assert(#LINE, (entry.value as ptr)[-1] == 1);
    }

    @assert(#LINE, c2 > c1);
    @assert(#LINE, c3 <= c2);
    @assert(#LINE, c4 == c3);
}