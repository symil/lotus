export type(i32) bool {
    and(bool) -> bool {{ i32.and }}
    or(bool) -> bool {{ i32.or }}
    eq(bool) -> bool {{ i32.eq }}
    ne(bool) -> bool {{ i32.ne }}
    not() -> bool {{ i32.eqz }}
    to_int() -> int {{ }}

    static default() {{ 
        (i32.const 0)
    }}

    static type_name() -> string {
        return #TYPE_NAME;
    }

    static __none() -> bool {{
        (i32.const 0)
    }}

    __is_none() -> bool {{
        (i32.eqz)
    }}

    __hash() -> int {
        return (this as int).__hash();
    }

    to_string() -> string {
        if this {
            return "true";
        } else {
            return "false";
        }
    }

    to_debug_string(set: Set<ptr>) -> string {
        return this.to_string();
    }

    __retain() {{
        
    }}

    __serialize(buffer: Buffer) {
        buffer.push(this.to_int());
    }

    static __deserialize(buffer: Buffer) -> bool? {
        return buffer.read().to_bool();
    }
}