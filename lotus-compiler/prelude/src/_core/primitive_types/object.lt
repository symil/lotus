const TYPE_CAPACITY = 1024; // TODO: use a macro
const TYPE_ID_TO_FIELD_COUNT = Map<int, int>::with_capacity(TYPE_CAPACITY);
const FULL_TYPE_NAME_HASH_TO_TYPE_ID = Map<int, int>::with_capacity(TYPE_CAPACITY);
pub const TYPE_ID_TO_ANCESTOR_IDS = Map<int, Set<int>>::with_capacity(TYPE_CAPACITY);

export class Object extends any {
    autogen static __init() {
        let ancestor_set = Set<int>::new();

        iter_ancestors {
            ancestor_set.add(#ANCESTOR_ID);
        }

        // @log(`${#TYPE_NAME}: ${#TYPE_ID}`);

        TYPE_ID_TO_FIELD_COUNT.set(#TYPE_ID, #FIELD_COUNT);
        TYPE_ID_TO_ANCESTOR_IDS.set(#TYPE_ID, ancestor_set);
        FULL_TYPE_NAME_HASH_TO_TYPE_ID.set(#TYPE_FULL_NAME.__hash(), #TYPE_ID);
    }

    autogen static __is(object: Object) -> bool {
        if object.__is_none() {
            return false;
        }

        let type_id = object.__as_ptr()[0];

        TYPE_ID_TO_ANCESTOR_IDS
            .get(type_id)
            .has(#TYPE_ID)
    }

    autogen static __create() -> Self {
        let data = @alloc(#FIELD_COUNT + 1);

        data[0] = #TYPE_ID;

        data as Self
    }

    autogen static __default() -> Self {
        let obj = Self::__create();

        iter_fields {
            obj.#FIELD_NAME = #FIELD_DEFAULT_EXPRESSION;
        }

        obj
    }

    autogen static __none() -> Self {{
        (i32.const 0)
    }}

    __eq(other: Self) -> bool {{
        i32.eq
    }}

    __ne(other: Self) -> bool {{
        i32.ne
    }}

    __is_none() -> bool {{
        (i32.eqz)
    }}

    __hash() -> int {
        if !self {
            0
        } else {
            self.__as_ptr().__get_version()
        }
    }

    __as_ptr() -> ptr {
        self as ptr
    }

    __get_type_id() -> int {
        (self as ptr)[0]
    }

    to_string() -> string {
        match self.__is_none() {
            true => "none",
            false => self.__to_string_dyn()
        }
    }

    autogen dyn __to_string_dyn() -> string {
        "[" + #TYPE_SHORT_NAME + " " + (self as int).to_hexa_string() + "]"
    }

    __to_debug_string(set: Set<ptr>) -> string {
        match self.__is_none() {
            true => "none",
            false => self.__to_debug_string_dyn(set)
        }
    }

    autogen dyn __to_debug_string_dyn(set: Set<ptr>) -> string {
        if !set.add(self.__as_ptr()) {
            return #TYPE_SHORT_NAME + " { <cycle> }";
        }

        match #FIELD_COUNT == 0 {
            true => #TYPE_SHORT_NAME,
            false => {
                let str = #TYPE_SHORT_NAME + " {\n";

                iter_fields {
                    str += (#FIELD_NAME + ": " + self.#FIELD_NAME.__to_debug_string(set)).indent(2) + ",\n";
                }

                str += "}";

                str
            }
        }
    }

    static __retain(value: Self) {
        if retain_memory(value.__as_ptr()) {
            value.__retain_dyn();
        }
    }

    autogen dyn __retain_dyn() {
        iter_fields {
            #FIELD_TYPE::__retain(self.#FIELD_NAME);
        }
    }

    static __serialize(buffer: Buffer, value: Self) {
        if !value || (buffer.context && !value.__allows_network_serialization(buffer.context as #USER_TYPE)) {
            buffer.write(0);
        } else if buffer.write_object_addr(value) {
            let remote_addr = buffer.get_remote_addr(value);
            let object_version = value.__as_ptr().__get_version();

            if remote_addr {
                buffer.write(-1);
                buffer.write(object_version);
                buffer.write(remote_addr);
            } else {
                buffer.write(value.__get_type_id());
                buffer.write(object_version);
                value.__serialize_dyn(buffer);
            }
        }
    }

    autogen dyn __serialize_dyn(buffer: Buffer) {
        iter_fields {
            #FIELD_TYPE::__serialize(buffer, self.#FIELD_NAME);
        }
    }

    static __deserialize(buffer: Buffer) -> Self? {
        let addr = buffer.read();

        if !addr || addr == 0 {
            return none; // no way to differenciate between "none because no more buffer" and "none because got 0"
        }

        let obj : Object = buffer.retrieve_local_object(addr);

        if obj {
            return obj;
        }

        let obj_type_id = buffer.read();

        if !obj_type_id {
            return none;
        }

        if obj_type_id == -1 {
            let obj_version = buffer.read();
            let obj_addr = buffer.read();

            if !obj_addr {
                return none;
            }

            // TODO: MAKE SO THIS OPERATION IS NOT INSANELY INSECURE
            let obj = (obj_addr as Object);

            if obj.__as_ptr().__get_version() != obj_version {
                return none;
            } else {
                return obj;
            }
        }

        let obj_size = TYPE_ID_TO_FIELD_COUNT.get(obj_type_id);

        if !obj_size {
            return none;
        }

        let obj_version = buffer.read();
        let obj_ptr = @alloc(1 + obj_size);

        obj_ptr.__set_version(obj_version);
        obj_ptr[0] = obj_type_id;

        obj = obj_ptr as Object;

        buffer.register_local_object(addr, obj);

        obj.__deserialize_dyn(buffer);

        obj
    }

    autogen dyn __deserialize_dyn(buffer: Buffer) {
        iter_fields {
            self.#FIELD_NAME = #FIELD_TYPE::__deserialize(buffer) as #FIELD_TYPE;
        }
    }

    static __serialize_with_schema(buffer: Buffer, value: Self) {
        buffer.write(TypeSchema::Object.as_int());

        if !value {
            buffer.write(0);
        } else if buffer.write_object_addr(value) {
            value.__serialize_with_schema_dyn(buffer);
        }
    }

    autogen dyn __serialize_with_schema_dyn(buffer: Buffer) {
        buffer.write(#TYPE_FULL_NAME.__hash());
        buffer.write(#FIELD_COUNT);

        iter_fields {
            string::__serialize_with_schema_without_header(buffer, #FIELD_NAME);
            #FIELD_TYPE::__serialize_with_schema(buffer, self.#FIELD_NAME);
        }
    }

    static __deserialize_with_schema(buffer: Buffer) -> Self? {
        let result : Self = none;

        match TypeSchema::__from_int(buffer.read()) {
            TypeSchema::Int => consume_int(buffer),
            TypeSchema::Float => consume_float(buffer),
            TypeSchema::String => consume_string(buffer),
            TypeSchema::Object => {
                result = Self::__deserialize_with_schema_without_header(buffer);
            },
        };

        result
    }

    static __deserialize_with_schema_without_header(buffer: Buffer) -> Self? {
        let obj_addr = buffer.read();

        if !obj_addr || obj_addr == 0 {
            return none;
        }

        let result = buffer.retrieve_local_object(obj_addr);

        if result {
            return result;
        }

        let full_type_name_hash = buffer.read();

        if !full_type_name_hash || full_type_name_hash == 0 {
            return none;
        }

        let type_id = FULL_TYPE_NAME_HASH_TO_TYPE_ID.get(full_type_name_hash);
        let type_size = TYPE_ID_TO_FIELD_COUNT.get(type_id);

        if !type_id || !type_size {
            return none;
        }

        let obj_ptr = @alloc(1 + type_size);

        obj_ptr[0] = type_id;

        result = obj_ptr as Object;

        buffer.register_local_object(obj_addr, result);

        result.__deserialize_with_schema_dyn(buffer);

        result
    }

    autogen dyn __deserialize_with_schema_dyn(buffer: Buffer) {
        let field_count = buffer.read();

        iter_fields {
            self.#FIELD_NAME = none;
        }

        for i in 0..field_count {
            let field_name = string::__deserialize_with_schema_without_header(buffer);
            let value_found = false;

            iter_fields {
                if field_name == #FIELD_NAME {
                    let field_value = #FIELD_TYPE::__deserialize_with_schema(buffer);
                    value_found = true;

                    if field_value is #FIELD_TYPE(casted) {
                        self.#FIELD_NAME = casted;
                    }
                }
            }

            if !value_found {
                consume_item(buffer);
            }
        }
    }

    dyn __allows_network_serialization(user: #USER_TYPE) -> bool {
        true
    }
}