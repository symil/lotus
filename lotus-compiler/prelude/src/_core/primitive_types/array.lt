export class Array<T> {
    type Item = T;

    _body: Pointer<T>,
    _length: int,
    _capacity: int,

    __add(other: Self) -> Self {
        self.concat(other)
    }

    static __none() -> Self {{
        (i32.const 0)
    }}

    static __default() -> Self {
        Self::with_capacity(4)
    }

    static new() -> Self {
        Self::with_capacity(4)
    }

    static with_capacity(capacity: int) -> Self {
        capacity = capacity.next_power_of_4();

        Self {
            _body: @alloc(capacity) as Pointer<T>,
            _length: 0,
            _capacity: capacity
        }
    }

    static from_raw_parts(body: Pointer<T>, length: int, capacity: int) -> Self {
        Self {
            _body: body,
            _length: length,
            _capacity: capacity
        }
    }

    static from_fill_function(size: int, callback: fn(int)(T)) -> Self {
        let result = Self::with_capacity(size);

        for i in 0..size {
            result.push_unchecked(callback(i));
        }

        result
    }

    body() -> Pointer<T> {
        self._body
    }

    len() -> int {
        self._length
    }

    capacity() -> int {
        self._capacity
    }

    __get_iterable_len() -> int {
        self._length
    }

    __get_iterable_ptr() -> Pointer<T> {
        self._body
    }

    __get_at_index(index: int) -> T {
        let length = self._length;

        if index < 0 {
            index = length + index;
        }

        match index < 0 || index >= length {
            true => none,
            false => self._body[index]
        }
    }

    __set_at_index(index: int, value: T) {
        self._body.__set_at_index(index, value);
    }

    get(index: int) -> T? {
        self.__get_at_index(index)
    }

    first() -> T? {
        if self.is_empty() {
            return none;
        }

        self.__get_at_index(0)
    }

    last() -> T? {
        if self.is_empty() {
            return none;
        }

        self.__get_at_index(self._length - 1)
    }

    is_empty() -> bool {
        self._length == 0
    }

    clone() -> Self {
        let result : Self = Self::with_capacity(self._length);

        result._length = self._length;
        self._body.copy_to(result._body, self._length);

        result
    }

    reverse() -> Self {
        let length = self._length;
        let result = Self::with_capacity(length);
        let body = result._body;
        result._length = length;

        for [i, item] in self {
            body[length - i - 1] = item;
        }

        result
    }

    // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array
    shuffle(rng: Rng = Rng::default()) -> Self {
        let length = self._length;
        let result = self.clone();
        let body = result._body;

        let current_index = length;

        while current_index > 0 {
            let random_index = rng.next(0, current_index);
            current_index -= 1;

            let tmp = body[current_index];
            body[current_index] = body[random_index];
            body[random_index] = tmp;
        }

        result
    }

    clear() {
        self._length = 0;
    }

    extend(other: Self) {
        for item in other {
            self.push(item);
        }
    }

    index_of(searched_item: T) -> int? {
        for [i, item] in self {
            if item == searched_item {
                return i;
            }
        }

        none
    }

    includes(searched_item: T) -> bool {
        !!self.index_of(searched_item)
    }

    remove(item: T) -> bool {
        let index = self.index_of(item);

        if index {
            let dest = self._body.add(index);
            let src = dest.add(1);
            let data_size = self._length - index - 1;

            src.copy_to(dest, data_size);
            self._length -= 1;
        }

        !!index
    }

    shift() -> T {
        if self.is_empty() {
            return none;
        }

        let result = self._body[0];

        self._length -= 1;
        self._body.add(1).copy_to(self._body, self._length);

        result
    }

    _add_length(additional_length: int) -> int {
        let current_length = self._length;
        let new_length = current_length + additional_length;

        if new_length > self._capacity {
            let current_body = self._body;
            let new_capacity = self._capacity * 4;
            let new_body = @alloc(new_capacity) as Pointer<T>;

            current_body.copy_to(new_body, current_length);

            self._body = new_body;
            self._capacity = new_capacity;
        }

        self._length = new_length;

        current_length
    }

    push(value: T) -> Self {
        let length = self._add_length(1);

        self._body[length] = value;

        self
    }

    push_unchecked(value: T) {
        self._body[self._length] = value;
        self._length += 1;
    }

    push_unique(value: T) -> bool {
        if !self.includes(value) {
            self.push(value);
            true
        } else {
            false
        }
    }

    pop() -> T {
        if self.is_empty() {
            return none;
        }

        self._length -= 1;        
        self._body[self._length]
    }

    insert_at(index: int, item: T) {
        self.insert_none(index, 1);
        self[index] = item;
    }

    insert_none(index: int, count: int) {
        let length = self._add_length(count);
        let body = self._body;

        for i in 0..count {
            let i2 = count - i - 1;
            body[index + count + i2] = body[index + i2];
        }

        for i in 0..count {
            body[index + i] = none;
        }
    }

    concat(other: Self) -> Self {
        let new_array = Self::with_capacity(self._length + other._length);

        for item in self {
            new_array.push_unchecked(item);
        }

        for item in other {
            new_array.push_unchecked(item);
        }

        new_array
    }

    slice(start: int = 0, end: int = none) -> Self {
        let start_index = (start || 0).clamp(0, self._length);
        let end_index = (end || self._length).clamp(0, self._length);
        let length = end_index - start_index;
        let result = Self::with_capacity(length);

        for i in start_index..end_index {
            result.push_unchecked(self._body[i]);
        }

        result
    }

    join(separator: string) -> string {
        if self.is_empty() {
            return "";
        }

        let item_count = self.len();
        let strings = self.map(item => item.to_string());
        let result_length = strings.reduce(0, (acc, str) => acc + str.len()) + (item_count - 1) * separator.len();
        let result = string::__create(result_length);

        let separator_content = separator._content();
        let separator_length = separator.len();
        let target = result._content();

        for [i, str] in strings {
            let length = str.len();
            str._content().copy_to(target, length);

            target = target.add(length);

            if i != item_count - 1 {
                separator_content.copy_to(target, separator_length);
                target = target.add(separator_length);
            }
        }

        result
    }

    filter(callback: fn(T, int)(bool)) -> T[] {
        let result : T[] = [];

        for [i, item] in self {
            if callback(item, i) {
                result.push(item);
            }
        }

        result
    }

    map<U>(callback: fn(T, int)(U)) -> U[] {
        let result : U[] = [];

        for [i, item] in self {
            result.push(callback(item, i));
        }

        result
    }

    filter_map<U>(callback: fn(T, int)(U)) -> U[] {
        let result : U[] = [];

        for [i, item] in self {
            let mapped = callback(item, i);

            if mapped {
                result.push(mapped);
            }
        }

        result
    }

    reduce<U>(init: U, callback: fn(U, T, int)(U)) -> U {
        let result = init;

        for [i, item] in self {
            result = callback(result, item, i);
        }
        
        result
    }

    count(predicate: fn(T, int)(bool)) -> int {
        let result = 0;

        for [i, item] in self {
            if predicate(item, i) {
                result += 1;
            }
        }

        result
    }

    sort(compare: fn(T, T)(int)) -> Self {
        let result = self.clone();
        let secondary_keys = @alloc(self._length);

        for i in 0..self._length {
            secondary_keys[i] = i;
        }

        quick_sort(result._body, 0, result._length - 1, compare, secondary_keys);

        result
    }

    get_random() -> T {
        self[Rng::int(0, self.len())]
    }

    dyn __retain_dyn() {
        Pointer<T>::__retain(self._body);

        for item in self {
            T::__retain(item);
        }
    }

    dyn __serialize_dyn(buffer: Buffer) {
        buffer.write(self._length);

        for item in self {
            T::__serialize(buffer, item);
        }
    }

    dyn __deserialize_dyn(buffer: Buffer) {
        let length = buffer.read();

        self._body = @alloc(length) as Pointer<T>;
        self._length = 0;
        self._capacity = length;

        for i in 0..length {
            let item = T::__deserialize(buffer);

            self.push_unchecked(item);
        }
    }

    dyn __serialize_with_schema_dyn(buffer: Buffer) {
        buffer.write(#TYPE_FULL_NAME.__hash());
        buffer.write(self.len());

        for item in self {
            T::__serialize_with_schema(buffer, item);
        }
    }

    dyn __deserialize_with_schema_dyn(buffer: Buffer) {
        let item_count = buffer.read();

        self._capacity = item_count.next_power_of_4();
        self._body = @alloc(self._capacity) as Pointer<T>;
        self._length = item_count;

        for i in 0..item_count {
            let item = T::__deserialize_with_schema(buffer);

            if item is T(casted) {
                self._body[i] = casted;
            } else {
                self._body[i] = none;
            }
        }
    }

    dyn __to_string_dyn() -> string {
        if self.__is_none() {
            return "none";
        }

        "[" + #TYPE_SHORT_NAME + " " + (self as int).to_hexa_string() + "]"
    }

    dyn __to_debug_string_dyn(set: Set<ptr>) -> string {
        let length = self._length;

        if length == 0 {
            return "[]";
        }

        let strings : string[] = [];
        let has_line_breaks = false;

        for item in self {
            let str = item.__to_debug_string(set);

            if str.contains("\n") {
                has_line_breaks = true;
            }

            strings.push(str);
        }

        match has_line_breaks {
            true => "[\n" + strings.join(",\n").indent(2) + "\n]",
            false => "[ " + strings.join(", ") + " ]"
        }
    }
}

fn partition<T>(array: Pointer<T>, start_index: int, end_index: int, compare: fn(T, T)(int), secondary_keys: ptr) -> int {
    let pivot = array[end_index];
    let i = start_index - 1;

    for j in start_index..end_index {
        let compare_value = compare(array[j], pivot);

        if compare_value == 0 {
            compare_value = secondary_keys[j] - secondary_keys[end_index];
        }

        if compare_value < 0 {
            i += 1;
            array.swap(i, j);
            secondary_keys.swap(i, j);
        }
    }

    array.swap(i + 1, end_index);
    secondary_keys.swap(i + 1, end_index);

    i + 1
}

fn quick_sort<T>(array: Pointer<T>, start_index: int, end_index: int, compare: fn(T, T)(int), secondary_keys: ptr) {
    if start_index < end_index {
        let middle_index = partition(array, start_index, end_index, compare, secondary_keys);

        quick_sort(array, start_index, middle_index - 1, compare, secondary_keys);
        quick_sort(array, middle_index + 1, end_index, compare, secondary_keys);
    }
}