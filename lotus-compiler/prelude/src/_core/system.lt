sys type(void) system {
    static __end_init() {
        init_memory();
    }

    todo<T>() -> T {{
        unreachable
    }}

    panic(message: string) {
        @log(`panic: ${message}`);
        wasm_process_exit(1);
        trap();
    }

    assert(line: int, value: bool) {
        wasm_assert(line, value);
    }

    alloc(block_size: int) -> ptr {
        allocate_memory(block_size)
    }

    retain<T>(value: T) {
        T::__retain(value);
    }

    trigger_garbage_collection() {
        trigger_garbage_collection();
    }

    get_allocated_block_count() -> int {
        get_allocated_block_count()
    }

    get_memory_footprint() -> int {
        get_allocated_system_memory()
    }

    log<T>(value: T) {
        let str = value.to_string();

        wasm_log_string(str);
    }

    log_int(value: int) {
        wasm_log_int(value);
    }

    trace(message: string) {
        wasm_trace(message);
    }

    get_debug_string<T>(value: T) -> string {
        value.__to_debug_string(Set<ptr>::new())
    }

    dbg<T>(value: T) {
        wasm_log_string(@get_debug_string(value));
    }

    serialize<T>(value: T, buffer: Buffer) -> Buffer {
        T::__serialize(buffer, value);
        buffer
    }

    deserialize<T>(buffer: Buffer) -> T? {
        let value = T::__deserialize(buffer);

        match buffer.has_read_overflow() {
            true => none,
            false => value
        }
    }

    serialize_with_schema<T>(value: T) -> int[] {
        let buffer = Buffer;

        T::__serialize_with_schema(buffer, value);

        buffer.consume()
    }

    deserialize_with_schema<T>(array: int[]) -> T? {
        let buffer = Buffer::from_array(array);
        let value = T::__deserialize_with_schema(buffer);

        match buffer.has_read_overflow() {
            true => none,
            false => value
        }
    }

    int<T>(value: T) {
        @log(value as int);
    }

    __type<T>(value: T) {
        @log(T::__type_name());
    }

    emit(event: Object, targets: Object[]) {
        event.emit(targets);
    }

    get_current_time() -> int {
        wasm_get_current_time()
    }

    time_start(label: string) {
        wasm_time_start(label);
    }
    
    time_end(label: string) {
        wasm_time_end(label);
    }
}

fn trap() {{
    unreachable
}}