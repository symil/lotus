const TITLE_BAR_HEIGHT = .15h;
const TITLE_TEXT_SIZE = .8h;
const USERNAME_TEXT_SIZE = .5h;

export view LobbyScreen {
    title: string,
    background_color : Color,
    text_font: Font,
    title_color : Color,

    _displayLoginPanel() {
        self.layout()
            .move_center()
            .resize_from_height(0.1h, 5)
            .towards_bottom()
            .inner_margin(20)
            .push(UsernameTextBox)
            .push(LoginButton)
    }

    _displayUserInfo(user: QuickGameUser) {
        let username_label = Label {
            text: user.name,
            text_size: USERNAME_TEXT_SIZE,
            background_color: Color::blue(),
        };

        self.layout()
            .move_top_right()
            .resize_from_height(TITLE_BAR_HEIGHT, 2)
            .push(username_label)
            .move_bottom_right()
            .resize_from_height(0.07h, 3)
            .margin(.02h)
            .push(LogoutButton)
    }

    _displayMatchmakingButton() {
        self.layout()
            .move_bottom()
            .resize_from_width(.2w, 4)
            .margin(0.02h)
            .push(MatchmakingButton)
    }

    @OnRender {
        let is_user_logged = !!evt.client.user.name;
        let title_label = Label {
            text: self.title,
            text_color: self.title_color,
            text_font: self.text_font,
            background_color: Color::orange()
        };

        self.background_color(self.background_color);
        self.layout()
            .move_top()
            .towards_bottom()
            .set_height(TITLE_BAR_HEIGHT)
            .push(title_label)
        
        if is_user_logged {
            // self._displayLoginPanel();
            self._displayUserInfo(evt.client.user);
            self._displayMatchmakingButton();
        } else {
            self._displayLoginPanel();
        }
    }

    @OnKeyboardEvent {
        if evt.action != KeyboardAction::Down {
            return;
        }

        if evt.code == KeyCode::Tab {
            if evt.shift_key {
                self.client().focus_prev();
            } else {
                self.client().focus_next();
            }
            intercept;
        }
    }
}

fn log<T>(value: T) -> bool {
    @dbg(value);
    true
}