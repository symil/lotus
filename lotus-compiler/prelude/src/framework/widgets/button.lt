export view Button {
    text: string = "",
    text_color: Color = Color::black(),
    text_size: DisplaySize = DEFAULT_BUTTON_TEXT_SIZE,
    text_font: Font = DEFAULT_FONT,
    background_color : Color = DEFAULT_BACKGROUND_COLOR,
    border_width : DisplaySize = DEFAULT_BORDER_WIDTH,
    border_radius: DisplaySize = DEFAULT_BORDER_RADIUS,
    disabled: bool = false,
    on_click: fn(Client) = none,

    @OnRender {
        self.add_to_focus_chain()
            .background_color(self.background_color)
            .text(self.text)
            .text_color(self.text_color)
            .text_size(self.text_size)
            .text_font(self.text_font)
            .border_color(self.text_color)
            .border_width(self.border_width)
            .border_radius(self.border_radius)
            .focus_border_width(self.border_width.scale(DEFAULT_FOCUSED_BORDER_WIDTH_MULTIPLIER))
            .disabled_overlay_color(DEFAULT_DISABLED_OVERLAY_COLOR)
            .disabled_overlay_alpha(DEFAULT_DISABLED_OVERLAY_ALPHA)
            .hover_overlay_color(DEFAULT_HOVER_OVERLAY_COLOR)
            .hover_overlay_alpha(DEFAULT_HOVER_OVERLAY_ALPHA)
            .hover_cursor(Cursor::Pointer)
            .focus_background_color(Color::orange())
            .set_disabled(self.disabled)
    }

    @OnMouseDown {
        evt.will_be_focused = none;
    }

    @OnClick {
        if self.on_click {
            (self.on_click)(evt.client)
        }
    }

    @OnKeyDown {
        check self.is_focused();

        if evt.key == Key::Enter && self.on_click {
            (self.on_click)(evt.client);
        }
    }
}