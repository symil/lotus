export class BlazeWindow {
    title: string = "Game",
    background_color: Color = Color::white(),
    make_opponent_bot: fn()(Bot) = none,

    @OnRender {
        evt.local_data.game_name = self.title;

        let screen = evt.user.game || LobbyScreen;

        evt.view
            .background_color(self.background_color)
            .render_child(screen)
            .render_children(evt.user.messages)
            // .render_child(Tooltip)
        
        // self.add_child(TestImage.set_rect(Rect::new(250, 500, 300, 300)));
    }

    @OnClientStart {
        if self.make_opponent_bot {
            evt.local_data.ui.bot_button = MatchmakingButton { make_bot_opponent: self.make_opponent_bot };
        }

        // evt.client.clear_local_storage();
        evt.client.set_local_storage_key_prefix(self.title + ":");

        let local_storage_username : string = evt.client.get_local_storage_item(USERNAME_LOCAL_STORAGE_KEY);

        if !local_storage_username.is_empty() {
            evt.client.freeze();
            evt.client.send_request_with_callback(LoginRequest {
                username: local_storage_username
            }, () => evt.client.unfreeze());
        }
    }

    @OnClientUpdate {
        if evt.user.game {
            evt.user.transitions.trigger(evt.user.current_time, evt.user.game);
        }
    }

    @OnKeyDown[-1] {
        check evt.alt_key;
        
        if evt.key == Key::KeyC {
            evt.client.clear_local_storage();
        } else if evt.key == Key::KeyV {
            evt.client.send_request(DebugRequest { message: "debug message" });
        }
    }
}