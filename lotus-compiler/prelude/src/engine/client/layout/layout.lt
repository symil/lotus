export class Layout<T> {
    rect: Rect,
    item: T,
    on_render: fn(T, Rect, LayoutItem<T>),
    _root_list: LayoutItem<T>[] = [],
    _root: LayoutItem<T> = none,
    _current_container: LayoutItem<T> = none,
    _current_item: LayoutItem<T> = none,
    _pushed_items: LayoutItem<T>[] = [],

    _flush() {
        if self._root {
            self._root_list.push(self._root);
        }

        self._root = none;
        self._current_container = none;
        self._current_item = none;
    }

    _init_root() {
        check !self._root;

        let outer_margin = self._root_list.last().and_then(root => root.outer_margin).or(0f);

        self._root = LayoutItem<T> {
            item: self.item,
            parent: none,
            direction: LayoutDirection::LeftToRight,
            outer_margin
        };
        self._current_container = self._root;
        self._current_item = self._root;
    }

    _get_root_rect() -> Rect {
        self.rect
    }

    get_current_item() -> T {
        self._init_root();

        self._current_item.item
    }

    render() -> Self {
        self._flush();

        for root in self._root_list {
            root.render(self.rect, self.on_render);
        }

        self._root_list.clear();
        self
    }

    push(item: T) -> Self {
        self._init_root();
        check self._current_container;

        let container = self._current_container;

        self._current_item = LayoutItem<T> {
            item,
            parent: container,
            force: container.child_force,
            aspect_ratio: container.child_aspect_ratio,
            width: container.child_width,
            height: container.child_height
        };

        container.children.push(self._current_item);

        if item {
            self._pushed_items.push(self._current_item);
        }

        self
    }

    push_separator() -> Self {
        self.push(none)
    }

    push_container() -> Self {
        self.push(none)
    }

    push_list(items: T[]) -> Self {
        for item in items {
            self.push(item)
        }
        
        self
    }

    back() -> Self {
        check self._current_container;

        self._current_container = self._current_container.parent || self._current_container;
        self
    }

    direction(direction: LayoutDirection) -> Self {
        self._init_root();
        self._current_container = self._current_item;

        self._current_item.direction = direction;
        self
    }

    alignment(alignment: float) -> Self {
        self._init_root();
        self._current_item.alignment = alignment;
        self
    }

    sub_alignment(sub_alignment: float) -> Self {
        self._init_root();
        self._current_item.sub_alignment = sub_alignment;
        self
    }

    width(width: DisplaySize) -> Self {
        self._init_root();
        self._current_item.width = width.resolve(self._get_root_rect());
        self
    }

    height(height: DisplaySize) -> Self {
        self._init_root();
        self._current_item.height = height.resolve(self._get_root_rect());
        self
    }

    aspect_ratio(aspect_ratio: float) -> Self {
        self._init_root();
        self._current_item.aspect_ratio = aspect_ratio;
        // TODO: unset width or height
        self
    }

    force(force: float) -> Self {
        self._init_root();
        let item = self._current_item;

        item.force = force;
        item.aspect_ratio = none;
        item.width = none;
        item.height = none;
        self
    }

    child_force(force: float) -> Self {
        self._init_root();
        let item = self._current_item;

        item.child_force = force;
        item.child_aspect_ratio = none;
        item.child_width = none;
        item.child_height = none;
        self
    }

    child_width(width: DisplaySize) -> Self {
        self._init_root();
        self._current_item.child_width = width.resolve(self._get_root_rect());
        self
    }

    child_height(height: DisplaySize) -> Self {
        self._init_root();
        self._current_item.child_height = height.resolve(self._get_root_rect());
        self
    }

    child_aspect_ratio(aspect_ratio: float) -> Self {
        self._init_root();
        self._current_item.child_aspect_ratio = aspect_ratio;
        // TODO: unset width or height
        self
    }

    inner_margin(inner_margin: DisplaySize) -> Self {
        self._init_root();
        self._current_item.inner_margin = inner_margin.resolve(self._get_root_rect());
        self
    }

    outer_margin(outer_margin: DisplaySize) -> Self {
        self._init_root();
        self._current_item.outer_margin = outer_margin.resolve(self._get_root_rect());
        self
    }

    margin(margin: DisplaySize) -> Self {
        self
            .inner_margin(margin)
            .outer_margin(margin)
    }

    reset() -> Self {
        self._flush();
        self
    }

    collect() -> T[] {
        self._pushed_items.map(layout_item => layout_item.item)
    }

    collect_rects() -> Rect[] {
        self._pushed_items.map(layout_item => layout_item.rect)
    }

    _bulk_config(direction: LayoutDirection, alignment: float, sub_alignment: float) -> Self {
        self
            .direction(direction)
            .alignment(alignment)
            .sub_alignment(sub_alignment)
    }

    center_to_right() -> Self { self._bulk_config(LayoutDirection::LeftToRight, 0.5, 0.5) }
    center_to_left() -> Self { self._bulk_config(LayoutDirection::RightToLeft, 0.5, 0.5) }
    center_to_bottom() -> Self { self._bulk_config(LayoutDirection::TopToBottom, 0.5, 0.5) }
    center_to_top() -> Self { self._bulk_config(LayoutDirection::BottomToTop, 0.5, 0.5) }

    left_to_right() -> Self { self._bulk_config(LayoutDirection::LeftToRight, 0, 0.5) }
    right_to_left() -> Self { self._bulk_config(LayoutDirection::RightToLeft, 0, 0.5) }
    top_to_bottom() -> Self { self._bulk_config(LayoutDirection::TopToBottom, 0, 0.5) }
    bottom_to_top() -> Self { self._bulk_config(LayoutDirection::BottomToTop, 0, 0.5) }

    top_left_to_right() -> Self { self._bulk_config(LayoutDirection::LeftToRight, 0, 0) }
    bottom_left_to_right() -> Self { self._bulk_config(LayoutDirection::LeftToRight, 0, 1) }
    top_right_to_left() -> Self { self._bulk_config(LayoutDirection::RightToLeft, 0, 0) }
    bottom_right_to_left() -> Self { self._bulk_config(LayoutDirection::RightToLeft, 0, 1) }
    top_left_to_bottom() -> Self { self._bulk_config(LayoutDirection::TopToBottom, 0, 0) }
    top_right_to_bottom() -> Self { self._bulk_config(LayoutDirection::TopToBottom, 0, 1) }
    bottom_left_to_top() -> Self { self._bulk_config(LayoutDirection::BottomToTop, 0, 0) }
    bottom_right_to_top() -> Self { self._bulk_config(LayoutDirection::BottomToTop, 0, 1) }
}