pub class ViewLayout {
    view: View,
    _root_list: ViewLayoutItem[] = [],
    _root: ViewLayoutItem = none,
    _current_container: ViewLayoutItem = none,
    _current_item: ViewLayoutItem = none,

    _flush() {
        if self._root {
            self._root_list.push(self._root);
        }

        self._root = none;
        self._current_container = none;
        self._current_item = none;
    }

    _init_root() {
        check !self._root;

        let outer_margin = self._root_list.last().and_then(root => root.outer_margin).or(0f);

        self._root = ViewLayoutItem {
            parent: none,
            view: self.view,
            direction: LayoutDirection::LeftToRight,
            outer_margin
        };
        self._current_container = self._root;
        self._current_item = self._root;
    }

    _get_last_view() -> View {
        self._init_root();

        self._current_item.view
    }

    _get_root_rect() -> Rect {
        self.view.rect()
    }

    render() {
        self._flush();

        for root in self._root_list {
            root.render(self.view.rect());
        }

        self._root_list.clear();
    }

    push(object: Object) -> Self {
        self._init_root();
        check self._current_container;

        let container = self._current_container;
        let last_item = container.children.last();
        let force = (last_item && last_item.force) || 1f;
        let aspect_ratio = last_item && last_item.aspect_ratio;
        let width = last_item && last_item.width;
        let height = last_item && last_item.height;
        let view : View = none;

        if object is View(as_view) {
            object = none;
            view = as_view;
        } else {
            view = View;
        }

        view.set_data(object);

        self._current_item = ViewLayoutItem {
            parent: container,
            view,
            force,
            aspect_ratio,
            width,
            height
        };

        container.children.push(self._current_item);

        self
    }

    push_separator() -> Self {
        self.push(none)
    }

    push_container() -> Self {
        self.push(none)
    }

    push_list(views: View[]) -> Self {
        for view in views {
            self.push(view)
        }
        
        self
    }

    back() -> Self {
        check self._current_container;

        self._current_container = self._current_container.parent || self._current_container;
        self
    }

    direction(direction: LayoutDirection) -> Self {
        self._init_root();
        self._current_container = self._current_item;

        self._current_item.direction = direction;
        self
    }

    alignment(alignment: float) -> Self {
        self._init_root();
        self._current_item.alignment = alignment;
        self
    }

    sub_alignment(sub_alignment: float) -> Self {
        self._init_root();
        self._current_item.sub_alignment = sub_alignment;
        self
    }

    width(width: DisplaySize) -> Self {
        self._init_root();
        self._current_item.width = width.resolve(self._get_root_rect());
        self
    }

    height(height: DisplaySize) -> Self {
        self._init_root();
        self._current_item.height = height.resolve(self._get_root_rect());
        self
    }

    aspect_ratio(aspect_ratio: float) -> Self {
        self._init_root();
        self._current_item.aspect_ratio = aspect_ratio;
        // TODO: unset width or height
        self
    }

    force(force: float) -> Self {
        self._init_root();
        let item = self._current_item;

        item.force = force;
        item.aspect_ratio = none;
        item.width = none;
        item.height = none;
        self
    }

    inner_margin(inner_margin: DisplaySize) -> Self {
        self._init_root();
        self._current_item.inner_margin = inner_margin.resolve(self._get_root_rect());
        self
    }

    outer_margin(outer_margin: DisplaySize) -> Self {
        self._init_root();
        self._current_item.outer_margin = outer_margin.resolve(self._get_root_rect());
        self
    }

    margin(margin: DisplaySize) -> Self {
        self
            .inner_margin(margin)
            .outer_margin(margin)
    }

    reset() -> Self {
        self._flush();
        self
    }

    _bulk_config(direction: LayoutDirection, alignment: float, sub_alignment: float) -> Self {
        self
            .direction(direction)
            .alignment(alignment)
            .sub_alignment(sub_alignment)
    }

    center_to_right() -> Self { self._bulk_config(LayoutDirection::LeftToRight, 0.5, 0.5) }
    center_to_left() -> Self { self._bulk_config(LayoutDirection::RightToLeft, 0.5, 0.5) }
    center_to_bottom() -> Self { self._bulk_config(LayoutDirection::TopToBottom, 0.5, 0.5) }
    center_to_top() -> Self { self._bulk_config(LayoutDirection::BottomToTop, 0.5, 0.5) }

    left_to_right() -> Self { self._bulk_config(LayoutDirection::LeftToRight, 0, 0.5) }
    right_to_left() -> Self { self._bulk_config(LayoutDirection::RightToLeft, 0, 0.5) }
    top_to_bottom() -> Self { self._bulk_config(LayoutDirection::TopToBottom, 0, 0.5) }
    bottom_to_top() -> Self { self._bulk_config(LayoutDirection::BottomToTop, 0, 0.5) }

    top_left_to_right() -> Self { self._bulk_config(LayoutDirection::LeftToRight, 0, 0) }
    bottom_left_to_right() -> Self { self._bulk_config(LayoutDirection::LeftToRight, 0, 1) }
    top_right_to_left() -> Self { self._bulk_config(LayoutDirection::RightToLeft, 0, 0) }
    bottom_right_to_left() -> Self { self._bulk_config(LayoutDirection::RightToLeft, 0, 1) }
    top_left_to_bottom() -> Self { self._bulk_config(LayoutDirection::TopToBottom, 0, 0) }
    top_right_to_bottom() -> Self { self._bulk_config(LayoutDirection::TopToBottom, 0, 1) }
    bottom_left_to_top() -> Self { self._bulk_config(LayoutDirection::BottomToTop, 0, 0) }
    bottom_right_to_top() -> Self { self._bulk_config(LayoutDirection::BottomToTop, 0, 1) }

    // GENERATION START

    shape(shape: Shape) -> Self { self._get_last_view().shape(shape); self }
    anchor(anchor: Anchor) -> Self { self._get_last_view().anchor(anchor); self }
    border_radius(border_radius: DisplaySize) -> Self { self._get_last_view().border_radius(border_radius); self }
    border_width(border_width: DisplaySize) -> Self { self._get_last_view().border_width(border_width); self }
    border_dash_length(border_dash_length: DisplaySize) -> Self { self._get_last_view().border_dash_length(border_dash_length); self }
    border_gap_length(border_gap_length: DisplaySize) -> Self { self._get_last_view().border_gap_length(border_gap_length); self }
    border_color(border_color: Color) -> Self { self._get_last_view().border_color(border_color); self }
    border_alpha(border_alpha: float) -> Self { self._get_last_view().border_alpha(border_alpha); self }
    background_color(background_color: Color) -> Self { self._get_last_view().background_color(background_color); self }
    background_alpha(background_alpha: float) -> Self { self._get_last_view().background_alpha(background_alpha); self }
    overlay_color(overlay_color: Color) -> Self { self._get_last_view().overlay_color(overlay_color); self }
    overlay_alpha(overlay_alpha: float) -> Self { self._get_last_view().overlay_alpha(overlay_alpha); self }
    image_url(image_url: string) -> Self { self._get_last_view().image_url(image_url); self }
    image_scale(image_scale: float) -> Self { self._get_last_view().image_scale(image_scale); self }
    image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self { self._get_last_view().image_layout(image_sprite_count_per_row, image_sprite_count_per_column); self }
    image_sprite_index(image_sprite_index: int) -> Self { self._get_last_view().image_sprite_index(image_sprite_index); self }
    animation_start_time(animation_start_time: float) -> Self { self._get_last_view().animation_start_time(animation_start_time); self }
    animation_current_time(animation_current_time: float) -> Self { self._get_last_view().animation_current_time(animation_current_time); self }
    animation_duration(animation_duration: float) -> Self { self._get_last_view().animation_duration(animation_duration); self }
    text(text: string) -> Self { self._get_last_view().text(text); self }
    text_font(text_font: Font) -> Self { self._get_last_view().text_font(text_font); self }
    text_size(text_size: DisplaySize) -> Self { self._get_last_view().text_size(text_size); self }
    text_color(text_color: Color) -> Self { self._get_last_view().text_color(text_color); self }
    text_alpha(text_alpha: float) -> Self { self._get_last_view().text_alpha(text_alpha); self }
    text_padding(text_padding: DisplaySize) -> Self { self._get_last_view().text_padding(text_padding); self }
    text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._get_last_view().text_horizontal_align(text_horizontal_align); self }
    text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._get_last_view().text_vertical_align(text_vertical_align); self }
    text_bold(text_bold: bool) -> Self { self._get_last_view().text_bold(text_bold); self }
    text_italic(text_italic: bool) -> Self { self._get_last_view().text_italic(text_italic); self }
    text_cursor_index(text_cursor_index: int) -> Self { self._get_last_view().text_cursor_index(text_cursor_index); self }
    shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._get_last_view().shrink_to_fit_text(shrink_to_fit_text); self }
    cursor(cursor: Cursor) -> Self { self._get_last_view().cursor(cursor); self }

    // GENERATION STOP
}