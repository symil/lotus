pub class ViewLayout {
    _layout: Layout<View>,

    static new(view: View) -> Self {
        let _layout = Layout<View> {
            rect: view.rect(),
            item: view,
            on_render: (view, rect, layout_item) => {
                if layout_item.parent {
                    layout_item.parent.item.render_child(view.data(), rect, view);
                }
            }
        };

        Self { _layout }
    }

    push(item: Object = none) -> Self {
        if item is View(view) {
            self._layout.push(view);
        } else {
            self._layout.push(View.set_data(item))
        }

        self
    }

    push_list(items: Object[]) -> Self {
        for item in items {
            self.push(item)
        }

        self
    }

    root_view() -> View {
        self._layout.item
    }

    render() -> Self { self._layout.render(); self }
    back() -> Self  { self._layout.back(); self }
    direction(direction: LayoutDirection) -> Self  { self._layout.direction(direction); self }
    alignment(alignment: float) -> Self  { self._layout.alignment(alignment); self }
    sub_alignment(sub_alignment: float) -> Self  { self._layout.sub_alignment(sub_alignment); self }
    force(force: float) -> Self  { self._layout.force(force); self }
    width(width: DisplaySize) -> Self  { self._layout.width(width); self }
    height(height: DisplaySize) -> Self  { self._layout.height(height); self }
    aspect_ratio(aspect_ratio: float) -> Self  { self._layout.aspect_ratio(aspect_ratio); self }
    child_force(force: float) -> Self  { self._layout.child_force(force); self }
    child_width(width: DisplaySize) -> Self  { self._layout.child_width(width); self }
    child_height(height: DisplaySize) -> Self  { self._layout.child_height(height); self }
    child_aspect_ratio(aspect_ratio: float) -> Self  { self._layout.child_aspect_ratio(aspect_ratio); self }
    inner_margin(inner_margin: DisplaySize) -> Self  { self._layout.inner_margin(inner_margin); self }
    outer_margin(outer_margin: DisplaySize) -> Self  { self._layout.outer_margin(outer_margin); self }
    margin(margin: DisplaySize) -> Self  { self._layout.margin(margin); self }
    reset() -> Self  { self._layout.reset(); self }
    center_to_right() -> Self  { self._layout.center_to_right(); self }
    center_to_left() -> Self  { self._layout.center_to_left(); self }
    center_to_bottom() -> Self  { self._layout.center_to_bottom(); self }
    center_to_top() -> Self  { self._layout.center_to_top(); self }
    left_to_right() -> Self  { self._layout.left_to_right(); self }
    right_to_left() -> Self  { self._layout.right_to_left(); self }
    top_to_bottom() -> Self  { self._layout.top_to_bottom(); self }
    bottom_to_top() -> Self  { self._layout.bottom_to_top(); self }
    top_left_to_right() -> Self  { self._layout.top_left_to_right(); self }
    bottom_left_to_right() -> Self  { self._layout.bottom_left_to_right(); self }
    top_right_to_left() -> Self  { self._layout.top_right_to_left(); self }
    bottom_right_to_left() -> Self  { self._layout.bottom_right_to_left(); self }
    top_left_to_bottom() -> Self  { self._layout.top_left_to_bottom(); self }
    top_right_to_bottom() -> Self  { self._layout.top_right_to_bottom(); self }
    bottom_left_to_top() -> Self  { self._layout.bottom_left_to_top(); self }
    bottom_right_to_top() -> Self  { self._layout.bottom_right_to_top(); self }


    _get_last_view() -> View {
        self._layout.get_current_item()
    }

    // GENERATION START

    shape(shape: Shape) -> Self { self._get_last_view().shape(shape); self }
    offset_x(offset_x: DisplaySize) -> Self { self._get_last_view().offset_x(offset_x); self }
    offset_y(offset_y: DisplaySize) -> Self { self._get_last_view().offset_y(offset_y); self }
    z_index(z_index: float) -> Self { self._get_last_view().z_index(z_index); self }
    horizontal_anchor(horizontal_anchor: HorizontalAlign) -> Self { self._get_last_view().horizontal_anchor(horizontal_anchor); self }
    vertical_anchor(vertical_anchor: VerticalAlign) -> Self { self._get_last_view().vertical_anchor(vertical_anchor); self }
    border_radius(border_radius: DisplaySize) -> Self { self._get_last_view().border_radius(border_radius); self }
    border_width(border_width: DisplaySize) -> Self { self._get_last_view().border_width(border_width); self }
    border_dash_length(border_dash_length: DisplaySize) -> Self { self._get_last_view().border_dash_length(border_dash_length); self }
    border_gap_length(border_gap_length: DisplaySize) -> Self { self._get_last_view().border_gap_length(border_gap_length); self }
    border_color(border_color: Color) -> Self { self._get_last_view().border_color(border_color); self }
    border_alpha(border_alpha: float) -> Self { self._get_last_view().border_alpha(border_alpha); self }
    background_color(background_color: Color) -> Self { self._get_last_view().background_color(background_color); self }
    background_alpha(background_alpha: float) -> Self { self._get_last_view().background_alpha(background_alpha); self }
    overlay_color(overlay_color: Color) -> Self { self._get_last_view().overlay_color(overlay_color); self }
    overlay_alpha(overlay_alpha: float) -> Self { self._get_last_view().overlay_alpha(overlay_alpha); self }
    image_url(image_url: string) -> Self { self._get_last_view().image_url(image_url); self }
    image_scale(image_scale: float) -> Self { self._get_last_view().image_scale(image_scale); self }
    image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self { self._get_last_view().image_layout(image_sprite_count_per_row, image_sprite_count_per_column); self }
    image_sprite_index(image_sprite_index: int) -> Self { self._get_last_view().image_sprite_index(image_sprite_index); self }
    animation_start_time(animation_start_time: float) -> Self { self._get_last_view().animation_start_time(animation_start_time); self }
    animation_current_time(animation_current_time: float) -> Self { self._get_last_view().animation_current_time(animation_current_time); self }
    animation_duration(animation_duration: float) -> Self { self._get_last_view().animation_duration(animation_duration); self }
    text(text: string) -> Self { self._get_last_view().text(text); self }
    text_font(text_font: Font) -> Self { self._get_last_view().text_font(text_font); self }
    text_size(text_size: DisplaySize) -> Self { self._get_last_view().text_size(text_size); self }
    text_color(text_color: Color) -> Self { self._get_last_view().text_color(text_color); self }
    text_alpha(text_alpha: float) -> Self { self._get_last_view().text_alpha(text_alpha); self }
    text_padding(text_padding: DisplaySize) -> Self { self._get_last_view().text_padding(text_padding); self }
    text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._get_last_view().text_horizontal_align(text_horizontal_align); self }
    text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._get_last_view().text_vertical_align(text_vertical_align); self }
    text_bold(text_bold: bool) -> Self { self._get_last_view().text_bold(text_bold); self }
    text_italic(text_italic: bool) -> Self { self._get_last_view().text_italic(text_italic); self }
    text_cursor_index(text_cursor_index: int) -> Self { self._get_last_view().text_cursor_index(text_cursor_index); self }
    shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._get_last_view().shrink_to_fit_text(shrink_to_fit_text); self }
    cursor(cursor: Cursor) -> Self { self._get_last_view().cursor(cursor); self }

    // GENERATION STOP
}