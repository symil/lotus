pub class LayoutItem<T> {
    parent: Self,
    item: T,
    rect: Rect = none,
    width: float = none,
    height: float = none,
    aspect_ratio: float = none,
    force: float = 1,
    inner_margin: float = 0,
    outer_margin: float = 0,
    direction: LayoutDirection = none,
    alignment: float = 0.5,
    sub_alignment: float = 0.5,
    children: Self[] = [],

    render(rect: Rect, render_callback: fn(T, Rect, Self)) {
        self.rect = rect;

        if self.item {
            render_callback(self.item, rect.clone(), self);
        }

        check self.direction;

        rect = rect.strip(self.outer_margin * 2, self.outer_margin * 2);

        let (is_horizontal, is_reverse) = match self.direction {
            LayoutDirection::LeftToRight => (true, false),
            LayoutDirection::RightToLeft => (true, true),
            LayoutDirection::TopToBottom => (false, false),
            LayoutDirection::BottomToTop => (false, true),
        };
        let (flex_size, fixed_size) = match is_horizontal {
            true => (rect.width, rect.height),
            false => (rect.height, rect.width),
        };
        let available_size = flex_size - (self.children.len() - 1).to_float() * self.inner_margin;
        let consumed_size = 0f;
        let total_force = 0f;

        for item in self.children {
            if is_horizontal && !item.height && (!item.width || !item.aspect_ratio) {
                item.height = rect.height;
            } else if !is_horizontal && !item.width && (!item.height || !item.aspect_ratio) {
                item.width = rect.width;
            }

            if item.aspect_ratio {
                if !item.height && item.width {
                    item.height = item.width / item.aspect_ratio;
                } else if !item.width && item.height {
                    item.width = item.height * item.aspect_ratio;
                }
            }

            if is_horizontal && item.width {
                consumed_size += item.width;
            } else if !is_horizontal && item.height {
                consumed_size += item.height;
            } else {
                total_force += item.force;
            }
        }

        let available_size_for_force = available_size - consumed_size;
        let x = rect.x1();
        let y = rect.y1();
        let progress_multiplier = 1f;
        let reverse_multiplier = 0f;
        let alignment_multiplier = self.alignment.clamp(0, 1);
        let sub_alignment_multiplier = self.sub_alignment.clamp(0, 1);

        if is_reverse {
            progress_multiplier = -1f;
            reverse_multiplier = 1f;

            if is_horizontal {
                x = rect.x2();
            } else {
                y = rect.y2();
            }
        }

        if total_force == 0f {
            let offset = available_size_for_force * alignment_multiplier * progress_multiplier;

            if is_horizontal {
                x += offset;
            } else {
                y += offset;
            }
        }

        for item in self.children {
            let item_x1 = x;
            let item_y1 = y;

            if is_horizontal && !item.width {
                item.width = available_size_for_force * item.force / total_force;
            } else if !is_horizontal && !item.height {
                item.height = available_size_for_force * item.force / total_force;
            }

            if is_horizontal {
                item_x1 -= (item.width * reverse_multiplier);
                item_y1 += (rect.height - item.height) * sub_alignment_multiplier;
                x += (item.width + self.inner_margin) * progress_multiplier;
            } else {
                item_y1 -= (item.height * reverse_multiplier);
                item_x1 += (rect.width - item.width) * sub_alignment_multiplier;
                y += (item.height + self.inner_margin) * progress_multiplier;
            }

            let item_rect = Rect::from_top_left(item_x1, item_y1, item.width, item.height);

            item.render(item_rect, render_callback);
        }
    }

    _compute_bounding_box(bounding_box: Rect) {
        if self.children.is_empty() {
            let x1 = bounding_box.x1().min(self.rect.x1());
            let y1 = bounding_box.y1().min(self.rect.y1());
            let x2 = bounding_box.x2().max(self.rect.x2());
            let y2 = bounding_box.y2().max(self.rect.y2());

            bounding_box.set(Rect::from_corners(x1, y1, x2, y2));
        }
    }
}