export enum Shape { Rectangle, Circle, Line }
export enum Font { Serif, SansSerif, Monospace, Cursive, Fantasy }
export enum HorizontalAlign { Left, Center, Right }
export enum VerticalAlign { Top, Middle, Bottom }
export enum Cursor { Default, Pointer, Text, Grab, Grabbing }
export enum Anchor { TopLeft, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight }

const DEFAULT_TEXT_SIZE = 1h;

export class Graphics {
    shape: Shape = Shape::Rectangle,
    anchor: Anchor = Anchor::Center,
    offset_x: DisplaySize = none,
    offset_y: DisplaySize = none,
    border_radius: DisplaySize = none,
    border_width: DisplaySize = none,
    border_dash_length: DisplaySize = none,
    border_gap_length: DisplaySize = none,
    border_color: Color = none,
    border_alpha: float = 1,
    background_color: Color = none,
    background_alpha: float = 1,
    overlay_color: Color = none,
    overlay_alpha: float = 1,
    image_url: string = none,
    image_scale: float = 1,
    image_sprite_count_per_row: int = 1,
    image_sprite_count_per_column: int = 1,
    image_sprite_index: int = 0,
    animation_start_time: float = 0,
    animation_current_time: float = none,
    animation_duration: float = 1,
    text: string = none,
    text_font: Font = Font::SansSerif,
    text_size: DisplaySize = DEFAULT_TEXT_SIZE,
    text_color: Color = Color::black(),
    text_alpha: float = 1,
    text_padding: DisplaySize = none,
    text_max_width: DisplaySize = none,
    text_max_height: DisplaySize = none,
    text_horizontal_align: HorizontalAlign = HorizontalAlign::Center,
    text_vertical_align: VerticalAlign = VerticalAlign::Middle,
    text_bold: bool = false,
    text_italic: bool = false,
    text_cursor_index: int = none,
    shrink_to_fit_text: bool = false,
    cursor: Cursor = none,

    static empty() -> Self {
        let graphics = Self::__create();

        iter_fields {
            graphics.#FIELD_NAME = none;
        }

        graphics
    }

    set(other: Self) {
        if !other {
            return;
        }

        iter_fields {
            if other.#FIELD_NAME {
                self.#FIELD_NAME = other.#FIELD_NAME;
            }
        }
    }

    __to_draw_primitive(rect: Rect, virtual_to_real_ratio: float) -> DrawPrimitive {
        let real_rect = rect.multiply(virtual_to_real_ratio);
        let width = real_rect.width;
        let height = real_rect.height;
        let image_sw = 1f;
        let image_sh = 1f;
        let image_sx = 0f;
        let image_sy = 0f;
        let image_url = self.image_url;
        let image_sprite_index = self.image_sprite_index;

        if image_url {
            let sprite_count = self.image_sprite_count_per_row * self.image_sprite_count_per_column;

            if self.animation_current_time {
                let progress = (self.animation_current_time - self.animation_start_time) / self.animation_duration;
                image_sprite_index = (progress * sprite_count.to_float()).floor().to_int();
            }

            if image_sprite_index < 0 || image_sprite_index >= sprite_count {
                image_url = none;
            } else {
                image_sw = 1f / self.image_sprite_count_per_row.to_float();
                image_sh = 1f / self.image_sprite_count_per_column.to_float();
                image_sx = (image_sprite_index % self.image_sprite_count_per_row).to_float() * image_sw;
                image_sy = (image_sprite_index / self.image_sprite_count_per_row).to_float() * image_sh;
            }
        }

        let offset_x = self.offset_x.resolve(rect, virtual_to_real_ratio);
        let offset_y = self.offset_y.resolve(rect, virtual_to_real_ratio);

        DrawPrimitive {
            x: real_rect.x + offset_x,
            y: real_rect.y + offset_y,
            z: real_rect.z,
            width: width,
            height: height,
            angle: real_rect.angle,
            anchor: self.anchor,
            shape: self.shape,
            border_color: self.border_color.mult_alpha(self.border_alpha),
            border_width: self.border_width.resolve(rect, virtual_to_real_ratio),
            border_radius: self.border_radius.resolve(rect, virtual_to_real_ratio),
            border_dash_length: self.border_dash_length.resolve(rect, virtual_to_real_ratio),
            border_gap_length: self.border_gap_length.resolve(rect, virtual_to_real_ratio),
            background_color: self.background_color.mult_alpha(self.background_alpha),
            overlay_color: self.overlay_color.mult_alpha(self.overlay_alpha),
            image_url,
            image_width: width * self.image_scale,
            image_height: height * self.image_scale,
            image_sw,
            image_sh,
            image_sx,
            image_sy,
            text: self.text,
            text_font: self.text_font,
            text_size: self.text_size.resolve(rect, virtual_to_real_ratio),
            text_color: self.text_color.mult_alpha(self.text_alpha),
            text_margin: self.text_padding.resolve(rect, virtual_to_real_ratio),
            text_horizontal_align: self.text_horizontal_align,
            text_vertical_align: self.text_vertical_align,
            text_bold: self.text_bold,
            text_italic: self.text_italic,
            text_cursor_index: self.text_cursor_index,
            shrink_to_fit_text: self.shrink_to_fit_text,
        }
    }
}