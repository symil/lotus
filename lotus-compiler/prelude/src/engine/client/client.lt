const CLIENT : Client = none;

const VIRTUAL_WIDTH = 1600f;
const VIRTUAL_HEIGHT = 900f;

export class Client {
    _user: #USER_TYPE = #USER_TYPE::__default(),
    _local_data: #LOCAL_DATA_TYPE = #LOCAL_DATA_TYPE::__default(),
    _buffer: Buffer = Buffer::with_capacity(BIG_BUFFER_SIZE),
    _local_object_to_remote_addr: Map<Object, int> = none,
    _websocket_id: int = none,
    _draw_primitives: DrawPrimitive[] = [],
    _network_events: RawNetworkEvent[] = [],
    _window_events: Event[] = [],
    _is_connected: bool = false,
    _frozen: bool = false,
    _request_id_counter: Counter = Counter::new(),
    _request_id_to_info: Map<int, RequestInfo> = Map<int, RequestInfo>::new(),
    _start_time: int = @get_current_time(),

    _hovered_view: View? = none,
    _focus_chain: View[] = [],
    _focused_index: int? = none,
    _focused_view: View? = none,
    _all_views: View[] = [],
    _real_width: float = none,
    _real_height: float = none,
    _virtual_width: float = VIRTUAL_WIDTH,
    _virtual_height: float = VIRTUAL_HEIGHT,
    _virtual_to_real_ratio: float = none,
    _cursor_x: float = 0,
    _cursor_y: float = 0,
    _local_storage_key_prefix: string = "",
    _pressed_view: View = none,
    _dragged_view: View = none,

    static get() -> Self {
        CLIENT
    }

    user() -> #USER_TYPE {
        self._user
    }

    local_data() -> #LOCAL_DATA_TYPE {
        self._local_data
    }

    views() -> View[] {
        self._all_views
    }

    _start() {
        wasm_init_window(VIRTUAL_WIDTH / VIRTUAL_HEIGHT);
        self._websocket_id = wasm_create_websocket();

        let window = #WINDOW_TYPE::__default();
        let event = OnClientStart {
            client: self,
            local_data: self._local_data,
        };

        event.emit([window]);
    }

    _update() {
        self._collect_window_events();
        self._collect_and_process_network_events();
        check self._should_continue_frame();
        self._create_views();
        self._draw_frame();
        self._process_window_events();
    }

    _should_continue_frame() -> bool {
        !self._frozen
    }

    _collect_window_events() {
        self._real_width = wasm_get_window_width();
        self._real_height = wasm_get_window_height();
        self._virtual_to_real_ratio = self._real_width / self._virtual_width;

        self._window_events.clear();
        self._buffer.reset();
        self._buffer.size = wasm_poll_window_events(self._buffer.data, self._buffer.capacity);

        while !self._buffer.is_finished() {
            let window_event = decode_window_event_from_buffer(self._buffer);

            if window_event is RawMouseEvent(mouse_event) {
                mouse_event.x /= self._virtual_to_real_ratio;
                mouse_event.y /= self._virtual_to_real_ratio;

                self._cursor_x = mouse_event.x;
                self._cursor_y = mouse_event.y;
            } else if window_event is RawWheelEvent(wheel_event) {
                wheel_event.x /= self._virtual_to_real_ratio
                wheel_event.y /= self._virtual_to_real_ratio
                wheel_event.delta_x /= self._virtual_to_real_ratio
                wheel_event.delta_y /= self._virtual_to_real_ratio
                wheel_event.delta_z /= self._virtual_to_real_ratio
            }

            self._window_events.push(window_event);
        }
    }

    _collect_and_process_network_events() {
        let processed_requests : RequestInfo[] = [];

        self._buffer.reset();
        self._buffer.size = wasm_poll_network_events(self._buffer.data, self._buffer.capacity);

        while !self._buffer.is_finished() {
            let websocket_id = self._buffer.read();
            let event_kind = NetworkEventKind::__from_int(self._buffer.read());

            if event_kind == NetworkEventKind::Message {
                let payload_size = self._buffer.read();
                let processed_request_count = self._buffer.read();

                if processed_request_count == 0 {
                    self._buffer.reset_serialization_utility();

                    self._user = @deserialize(self._buffer);
                    self._local_object_to_remote_addr = self._buffer.get_local_object_to_remote_addr_map().clone();
                    self._is_connected = true;
                } else {
                    for i in 0..processed_request_count {
                        let request_id = self._buffer.read();
                        let success = self._buffer.read().to_bool();
                        let info = self._request_id_to_info.delete(request_id);

                        if info {
                            info.success = success;
                            processed_requests.push(info);
                        }
                    }
                }
            }
        }

        for info in processed_requests {
            (info.callback)(info.success, self);
        }
    }

    _create_views() {
        let root_view = #WINDOW_TYPE::__default();

        root_view._rect = Rect::from_size(self._virtual_width, self._virtual_height)

        self._all_views.clear();
        self._focus_chain.clear();
        // TODO: clear focused & hovered view?
        self._render_view(root_view);
        self._hovered_view = self._detect_view_at(self._cursor_x, self._cursor_y);
        self._define_interactions();
        self._focused_view = self._focus_chain.get(self._focused_index);

        if !self._focused_view {
            self._focused_index = none;
        }
    }

    _render_view(view: View) {
        let event = OnRender {
            client: self,
            user: self._user,
            local_data: self._local_data
        };

        view._client = self;
        event.emit([view]);
        self._all_views.push(view);

        for child in view._children {
            self._render_view(child);
        }
    }

    _detect_view_at(x: float, y: float) -> View? {
        let current : View = none;

        for view in self._all_views {
            if view._graphics.detectable && view._rect.contains(x, y) {
                if !current || view._rect.z >= current._rect.z {
                    current = view;
                }
            }
        }

        current
    }

    _define_interactions() {
        let event = OnPostRender {
            client: self,
            user: self._user,
            local_data: self._local_data,
        };
        let views = self._all_views.clone().reverse();

        event.emit(views);
    }

    _draw_frame() {
        self._draw_primitives.clear();

        let cursor = Cursor::Default;

        for view in self._all_views {
            let is_disabled = view.is_disabled();

            if !is_disabled {
                if self._hovered_view == view {
                    view._graphics.set(view._hovered_graphics);
                }

                if self._focused_view == view {
                    view._graphics.set(view._focused_graphics);
                }

                if self._hovered_view == view {
                    cursor = view._graphics.cursor;
                }
            } else {
                view._graphics.set(view._disabled_graphics);
            }

            let draw_primitive = view._graphics.__to_draw_primitive(view._rect, self._virtual_to_real_ratio);

            self._draw_primitives.push(draw_primitive);
        }

        self._buffer.reset();
        self._buffer.write_unchecked(cursor);
        self._buffer.write_unchecked(self._draw_primitives.len());

        for primitive in self._draw_primitives {
            self._buffer.write_unchecked(primitive as int);
        }

        wasm_draw_frame(self._buffer.data, self._buffer.size);
    }

    _process_window_events() {
        let views = self._all_views.clone().reverse();
        let client_event = ClientEvent {
            client: self,
            user: self._user,
            local_data: self._local_data,
        };

        for event in self._window_events {
            match event {
                RawMouseEvent(mouse_event) => {
                    let view = self._detect_view_at(mouse_event.x, mouse_event.y);

                    if mouse_event.action == MouseAction::Down && self._focused_view && view != self._focused_view {
                        self.focus(none);
                    }

                    if view && !view.is_disabled() {
                        if mouse_event.action == MouseAction::Down {
                            self._pressed_view = view;

                            let event = OnMouseDown { ..client_event, ..mouse_event, view };
                            event.emit([view]);

                            if event.focus {
                                view.focus();
                            }

                        } else if mouse_event.action == MouseAction::Move {
                            if self._dragged_view {
                                // drag progress
                            } else if self._pressed_view {
                                self._dragged_view = self._pressed_view;

                                OnDragStart { ..client_event, ..mouse_event, view }.emit([view]);
                            }
                        } else if mouse_event.action == MouseAction::Up {
                            if self._pressed_view && self._pressed_view.rect().contains(mouse_event.x, mouse_event.y) {
                                OnClick { ..client_event, ..mouse_event, view }.emit([view]);
                            }

                            if self._dragged_view {
                                OnDragEnd { ..client_event, ..mouse_event, view }.emit([view]);
                            }
                        }
                    }
                },
                RawKeyboardEvent(keyboard_event) => {
                    if keyboard_event.action == KeyboardAction::Down {
                        OnKeyDown { ..client_event, ..keyboard_event }.emit(views)
                    } else if keyboard_event.action == KeyboardAction::Up {
                        OnKeyUp { ..client_event, ..keyboard_event }.emit(views)
                    }
                },
                RawWheelEvent(wheel_event) => {
                    let view = self._detect_view_at(wheel_event.x, wheel_event.y);

                    OnScroll { ..client_event, ..wheel_event, view }.emit(views)
                }
            }
        }
    }

    send_request<T>(request: T) {
        self.send_request_with_callback(request, none);
    }

    send_request_with_callback<T>(request: T, callback: RequestCallback = none) {
        let request_id = self._request_id_counter.next();

        self._buffer.reset();
        self._buffer.write(request_id);
        self._buffer.set_local_object_to_remote_addr_map(self._local_object_to_remote_addr);
        @serialize(request, self._buffer);

        if callback {
            self._request_id_to_info.set(request_id, RequestInfo {
                request,
                callback,
            });
        }

        wasm_send_message(self._websocket_id, self._buffer.data, self._buffer.size);
    }

    get_hovered_view() -> View? {
        self._hovered_view
    }

    add_to_focus_chain(view: View) {
        self._focus_chain.push(view);
    }

    clear_focus_chain() {
        self.set_focus_chain([]);
    }

    set_focus_chain(views: View[]) {
        self.focus(none);
        self._focus_chain = views;
    }

    get_focus_chain() -> View[] {
        self._focus_chain.clone()
    }

    focus(view: View?) {
        if self._focused_view == view {
            return;
        }

        if (view) {
            self._focused_index = self._focus_chain.index_of(view);

            OnFocus {
                client: self,
                user: self._user,
                local_data: self._local_data,
                view
            }.emit([view]);
        } else {
            self._focused_index = none;
        }

        self._focused_view = view;
    }

    get_focused_view() -> View? {
        self._focused_view
    }

    _focus_next_or_prev(d: int) {
        let start_index = self._focused_index || (d * -1);
        let chain_length = self._focus_chain.len();

        for i in 0..chain_length {
            let index = (start_index + chain_length + d + i * d) % chain_length;
            let view = self._focus_chain[index];

            if !view.is_disabled() {
                self.focus(view);
                return;
            }
        }
    }

    focus_next() {
        self._focus_next_or_prev(1);
    }

    focus_prev() {
        self._focus_next_or_prev(-1);
    }

    set_local_storage_key_prefix(prefix: string) {
        self._local_storage_key_prefix = prefix;
    }

    set_local_storage_item<T>(key: string, data: T) {
        key = self._local_storage_key_prefix + key;
        self._buffer.reset();
        T::__serialize_with_schema(self._buffer, data);
        wasm_set_local_storage_item(key, self._buffer.data, self._buffer.size);
    }

    remove_local_storage_item(key: string) {
        key = self._local_storage_key_prefix + key;
        wasm_remove_local_storage_item(key);
    }

    get_local_storage_item<T>(key: string) -> T? {
        key = self._local_storage_key_prefix + key;
        self._buffer.reset();
        self._buffer.size = wasm_get_local_storage_item(key, self._buffer.data, self._buffer.capacity);
        T::__deserialize_with_schema(self._buffer)
    }

    clear_local_storage() {
        wasm_clear_local_storage();
    }

    set_window_title(title: string) {
        wasm_set_window_title(title);
    }

    freeze() {
        self._frozen = true;
    }

    unfreeze() {
        self._frozen = false;
    }

    get_current_time() -> float {
        (@get_current_time() - self._start_time).to_float() / 1000f
    }

    prompt(message: string) -> string {
        self._buffer.reset();
        wasm_prompt(message, self._buffer);
        self._buffer.read_string()
    }

    get_key_value(key: KeyCode) -> string {
        self._buffer.reset();
        wasm_get_key_value(key, self._buffer);
        self._buffer.read_string()
    }

    _get_string_from_js(call: fn(Buffer)) -> string {
        self._buffer.reset();
        call(self._buffer);
        self._buffer.read_string()
    }

    get_href() -> string {
        self._get_string_from_js(buffer => wasm_get_href(buffer))
    }

    get_hostname() -> string {
        self._get_string_from_js(buffer => wasm_get_hostname(buffer))
    }

    get_protocol() -> string {
        self._get_string_from_js(buffer => wasm_get_protocol(buffer))
    }

    dyn __allows_network_serialization(user: #USER_TYPE) -> bool {
        false
    }

    dyn __to_debug_string_dyn(set: Set<Pointer<int>>) -> string{
        "<CLIENT>"
    }
}

sys fn start_client() {
    set_pointer_version_seed(wasm_get_current_time());
    CLIENT = Client;
    CLIENT._start();
}

sys fn update_client() {
    CLIENT._update();
    // @log(`memory used: ${get_memory_usage() / 1024} KB`);
    @retain(CLIENT);
    @trigger_garbage_collection();
}