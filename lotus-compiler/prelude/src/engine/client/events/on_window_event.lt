enum WindowEventType {
    Keyboard,
    Mouse,
    Wheel
}

pub fn decode_window_event_from_buffer(buffer: Buffer, client: Client) -> Event {
    let event_type : WindowEventType = buffer.read_unchecked();

    match event_type {
        WindowEventType::Mouse => OnMouseEvent {
            client,
            user: client._user,
            local_data: client._local_data,
            action: buffer.read_unchecked(),
            button: buffer.read_unchecked(),
            x: buffer.read_unchecked(),
            y: buffer.read_unchecked(),
        },
        WindowEventType::Keyboard => OnKeyboardEvent {
            client,
            user: client._user,
            local_data: client._local_data,
            action: buffer.read_unchecked(),
            code: buffer.read_unchecked(),
            text: buffer.read_unchecked(),
            ctrl_key: buffer.read_unchecked(),
            shift_key: buffer.read_unchecked(),
            alt_key: buffer.read_unchecked(),
            repeat: buffer.read_unchecked(),
        },
        WindowEventType::Wheel => OnWheelEvent {
            client,
            user: client._user,
            local_data: client._local_data,
            delta_x: buffer.read_unchecked(),
            delta_y: buffer.read_unchecked(),
            delta_z: buffer.read_unchecked(),
            delta_mode: buffer.read_unchecked(),
        }
    }
}