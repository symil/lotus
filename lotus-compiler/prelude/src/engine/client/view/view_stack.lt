pub class ViewStack {
    hashes: int[] = [],
    views: View[] = [],

    clear() {
        self.views.clear();
    }

    fill_from_hashes(all_views: View[]) {
        self.clear();

        let views : View[] = [];
        let hashes : int[] = [];

        for view in all_views {
            let hash = view.get_approximate_hash();

            if !view._disabled && self.hashes.includes(hash) {
                hashes.push(hash);
                views.push(view);
            }
        }

        views.reverse_in_place();

        self.views = views;
        self.hashes = hashes;
    }

    set_from_stack(stack: ViewStack) {
        self.clear();

        self.hashes = stack.hashes.clone();
        self.views = stack.views.clone();
    }

    set_from_array(views: View[]) -> Self {
        self.clear();

        self.hashes = views.map(view => view.get_approximate_hash());
        self.views = views.clone();
        self
    }

    set_from_view(view: View) {
        self.clear();

        if view {
            self.hashes.push(view.get_approximate_hash());
            self.views.push(view);
        }
    }

    list() -> View[] {
        self.views
    }

    first() -> View {
        self.views.first()
    }

    includes(view: View) -> bool {
        self.views.includes(view)
    }

    emit(event: ClientEvent) {
        let items = self.views.filter_map(view => view._data);

        event.emit(items, EventOptions {
            pre_process_callback: set_event_view,
        });
    }
}

fn set_event_view(event: Object, target: Object) {
    let client_event = event as ClientEvent;

    client_event.view = client_event.client.get_view(target);
}