export class View {
    _client: Client = Client::get(),
    _parent: View = none,
    _disabled: bool = false,
    _rect: Rect = none,
    _graphics: Graphics = Graphics,
    _hovered_graphics: Graphics = none,
    _focused_graphics: Graphics = none,
    _disabled_graphics: Graphics = none,
    _children: View[] = [],
    _layouts: Layout[] = []

    get_approximate_hash() -> int {
        let rect = self._rect;
        let graphics = self._graphics;

        let hash = self.__get_type_id()
            .hash_from(rect.x.as_int())
            .hash_from(rect.y.as_int())
            .hash_from(rect.width.as_int())
            .hash_from(rect.height.as_int())
            
        hash
    }

    client() -> Client? {
        self._client
    }

    rect() -> Rect {
        self._rect
    }

    children() -> View[] {
        self._children
    }

    enabled_or_none() -> View {
        if !self || self.is_disabled() {
            none
        } else {
            self
        }
    }

    get_descendants<T>(callback: fn(View)(T)) -> T[] {
        let accumulator = CollectAccumulator<T> {
            result: [],
            callback
        };

        self._traverse(accumulator, (acc, view) => {
            let mapped = (accumulator.callback)(view);

            if mapped {
                acc.result.push(mapped);
            }
        });

        accumulator.result
    }

    get_ancestors() -> View[] {
        let result : View[] = [];
        let current = self;

        while current {
            result.push(current);
            current = current._parent;
        }

        result
    }

    _traverse<T>(acc: T, callback: fn(T, View)) {
        callback(acc, self);

        for child in self._children {
            child._traverse(acc, callback);
        }
    }

    add_child(view: View) {
        check view != self;

        if !view._rect {
            view._rect = self._rect.clone();
        }

        view._parent = self;
        self._children.push(view);
    }

    is_ancestor_of(view: View) -> bool {
        if !view {
            return false;
        }

        match view == self {
            true => true,
            false => self.is_ancestor_of(view._parent),
        }
    }

    is_descendant_of(view: View) -> bool {
        if !view {
            return false;
        }

        view.is_ancestor_of(self)
    }

    layout() -> Layout {
        let layout = Layout {
            view: self
        };
        self._layouts.push(layout);
        layout
    }

    finish_layouts() {
        for layout in self._layouts {
            layout.finish();
        }
    }

    is_hovered() -> bool {
        !self.is_disabled() && self._client.hovered_view() == self
    }

    is_focused() -> bool {
        !self.is_disabled() && self._client.focused_view() == self
    }

    focus() -> Self {
        self._client.focus(self);
        self
    }

    unfocus() -> Self {
        if self.is_focused() {
            self._client.focus(none);
        }
        self
    }

    is_disabled() -> bool {
        self._disabled
    }

    set_disabled(value: bool) -> Self {
        self._disabled = value;
        self
    }

    add_to_focus_chain() -> Self {
        self._client.add_to_focus_chain(self)
        self
    }

    z_index(z_index: float) -> Self {
        self._rect.z = z_index;
        self
    }

    scale(ratio: float) -> Self {
        self._rect = self._rect.scale(ratio);
        self
    }

    strip_to_match_aspect_ratio(aspect_ratio: float) -> Self {
        self._rect = self._rect.strip_to_match_aspect_ratio(aspect_ratio);
        self
    }

    set_rect(rect: Rect) -> Self {
        self._rect = rect.clone();
        self
    }

    set_size(width: float, height: float) -> Self {
        self._rect = Rect::from_size(width, height);
        self
    }

    has_same_rect(other: View) {
        self._rect == other._rect
    }

    _hovered_graphics() -> Graphics {
        if !self._hovered_graphics {
            self._hovered_graphics = Graphics::empty();
        }
        self._hovered_graphics
    }

    _focused_graphics() -> Graphics {
        if !self._focused_graphics {
            self._focused_graphics = Graphics::empty();
        }
        self._focused_graphics
    }

    _disabled_graphics() -> Graphics {
        if !self._disabled_graphics {
            self._disabled_graphics = Graphics::empty();
        }
        self._disabled_graphics
    }

    // GENERATION START

    shape(shape: Shape) -> Self { self._graphics.shape = shape; self }
    anchor(anchor: Anchor) -> Self { self._graphics.anchor = anchor; self }
    border_radius(border_radius: DisplaySize) -> Self { self._graphics.border_radius = border_radius; self }
    border_width(border_width: DisplaySize) -> Self { self._graphics.border_width = border_width; self }
    border_dash_length(border_dash_length: DisplaySize) -> Self { self._graphics.border_dash_length = border_dash_length; self }
    border_gap_length(border_gap_length: DisplaySize) -> Self { self._graphics.border_gap_length = border_gap_length; self }
    border_color(border_color: Color) -> Self { self._graphics.border_color = border_color; self }
    border_alpha(border_alpha: float) -> Self { self._graphics.border_alpha = border_alpha; self }
    background_color(background_color: Color) -> Self { self._graphics.background_color = background_color; self }
    background_alpha(background_alpha: float) -> Self { self._graphics.background_alpha = background_alpha; self }
    overlay_color(overlay_color: Color) -> Self { self._graphics.overlay_color = overlay_color; self }
    overlay_alpha(overlay_alpha: float) -> Self { self._graphics.overlay_alpha = overlay_alpha; self }
    image_url(image_url: string) -> Self { self._graphics.image_url = image_url; self }
    image_scale(image_scale: float) -> Self { self._graphics.image_scale = image_scale; self }
    image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self {
        self._graphics.image_sprite_count_per_row = image_sprite_count_per_row;
        self._graphics.image_sprite_count_per_column = image_sprite_count_per_column;
        self
    }
    image_sprite_index(image_sprite_index: int) -> Self { self._graphics.image_sprite_index = image_sprite_index; self }
    animation_start_time(animation_start_time: float) -> Self { self._graphics.animation_start_time = animation_start_time; self }
    animation_current_time(animation_current_time: float) -> Self { self._graphics.animation_current_time = animation_current_time; self }
    animation_duration(animation_duration: float) -> Self { self._graphics.animation_duration = animation_duration; self }
    text(text: string) -> Self { self._graphics.text = text; self }
    text_font(text_font: Font) -> Self { self._graphics.text_font = text_font; self }
    text_size(text_size: DisplaySize) -> Self { self._graphics.text_size = text_size; self }
    text_color(text_color: Color) -> Self { self._graphics.text_color = text_color; self }
    text_alpha(text_alpha: float) -> Self { self._graphics.text_alpha = text_alpha; self }
    text_padding(text_padding: DisplaySize) -> Self { self._graphics.text_padding = text_padding; self }
    text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._graphics.text_horizontal_align = text_horizontal_align; self }
    text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._graphics.text_vertical_align = text_vertical_align; self }
    text_bold(text_bold: bool) -> Self { self._graphics.text_bold = text_bold; self }
    text_italic(text_italic: bool) -> Self { self._graphics.text_italic = text_italic; self }
    text_cursor_index(text_cursor_index: int) -> Self { self._graphics.text_cursor_index = text_cursor_index; self }
    shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._graphics.shrink_to_fit_text = shrink_to_fit_text; self }
    detectable(detectable: bool) -> Self { self._graphics.detectable = detectable; self }
    cursor(cursor: Cursor) -> Self { self._graphics.cursor = cursor; self }

    hover_shape(shape: Shape) -> Self { self._hovered_graphics().shape = shape; self }
    hover_anchor(anchor: Anchor) -> Self { self._hovered_graphics().anchor = anchor; self }
    hover_border_radius(border_radius: DisplaySize) -> Self { self._hovered_graphics().border_radius = border_radius; self }
    hover_border_width(border_width: DisplaySize) -> Self { self._hovered_graphics().border_width = border_width; self }
    hover_border_dash_length(border_dash_length: DisplaySize) -> Self { self._hovered_graphics().border_dash_length = border_dash_length; self }
    hover_border_gap_length(border_gap_length: DisplaySize) -> Self { self._hovered_graphics().border_gap_length = border_gap_length; self }
    hover_border_color(border_color: Color) -> Self { self._hovered_graphics().border_color = border_color; self }
    hover_border_alpha(border_alpha: float) -> Self { self._hovered_graphics().border_alpha = border_alpha; self }
    hover_background_color(background_color: Color) -> Self { self._hovered_graphics().background_color = background_color; self }
    hover_background_alpha(background_alpha: float) -> Self { self._hovered_graphics().background_alpha = background_alpha; self }
    hover_overlay_color(overlay_color: Color) -> Self { self._hovered_graphics().overlay_color = overlay_color; self }
    hover_overlay_alpha(overlay_alpha: float) -> Self { self._hovered_graphics().overlay_alpha = overlay_alpha; self }
    hover_image_url(image_url: string) -> Self { self._hovered_graphics().image_url = image_url; self }
    hover_image_scale(image_scale: float) -> Self { self._hovered_graphics().image_scale = image_scale; self }
    hover_image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self {
        self._hovered_graphics().image_sprite_count_per_row = image_sprite_count_per_row;
        self._hovered_graphics().image_sprite_count_per_column = image_sprite_count_per_column;
        self
    }
    hover_image_sprite_index(image_sprite_index: int) -> Self { self._hovered_graphics().image_sprite_index = image_sprite_index; self }
    hover_animation_start_time(animation_start_time: float) -> Self { self._hovered_graphics().animation_start_time = animation_start_time; self }
    hover_animation_current_time(animation_current_time: float) -> Self { self._hovered_graphics().animation_current_time = animation_current_time; self }
    hover_animation_duration(animation_duration: float) -> Self { self._hovered_graphics().animation_duration = animation_duration; self }
    hover_text(text: string) -> Self { self._hovered_graphics().text = text; self }
    hover_text_font(text_font: Font) -> Self { self._hovered_graphics().text_font = text_font; self }
    hover_text_size(text_size: DisplaySize) -> Self { self._hovered_graphics().text_size = text_size; self }
    hover_text_color(text_color: Color) -> Self { self._hovered_graphics().text_color = text_color; self }
    hover_text_alpha(text_alpha: float) -> Self { self._hovered_graphics().text_alpha = text_alpha; self }
    hover_text_padding(text_padding: DisplaySize) -> Self { self._hovered_graphics().text_padding = text_padding; self }
    hover_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._hovered_graphics().text_horizontal_align = text_horizontal_align; self }
    hover_text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._hovered_graphics().text_vertical_align = text_vertical_align; self }
    hover_text_bold(text_bold: bool) -> Self { self._hovered_graphics().text_bold = text_bold; self }
    hover_text_italic(text_italic: bool) -> Self { self._hovered_graphics().text_italic = text_italic; self }
    hover_text_cursor_index(text_cursor_index: int) -> Self { self._hovered_graphics().text_cursor_index = text_cursor_index; self }
    hover_shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._hovered_graphics().shrink_to_fit_text = shrink_to_fit_text; self }
    hover_detectable(detectable: bool) -> Self { self._hovered_graphics().detectable = detectable; self }
    hover_cursor(cursor: Cursor) -> Self { self._hovered_graphics().cursor = cursor; self }

    focus_shape(shape: Shape) -> Self { self._focused_graphics().shape = shape; self }
    focus_anchor(anchor: Anchor) -> Self { self._focused_graphics().anchor = anchor; self }
    focus_border_radius(border_radius: DisplaySize) -> Self { self._focused_graphics().border_radius = border_radius; self }
    focus_border_width(border_width: DisplaySize) -> Self { self._focused_graphics().border_width = border_width; self }
    focus_border_dash_length(border_dash_length: DisplaySize) -> Self { self._focused_graphics().border_dash_length = border_dash_length; self }
    focus_border_gap_length(border_gap_length: DisplaySize) -> Self { self._focused_graphics().border_gap_length = border_gap_length; self }
    focus_border_color(border_color: Color) -> Self { self._focused_graphics().border_color = border_color; self }
    focus_border_alpha(border_alpha: float) -> Self { self._focused_graphics().border_alpha = border_alpha; self }
    focus_background_color(background_color: Color) -> Self { self._focused_graphics().background_color = background_color; self }
    focus_background_alpha(background_alpha: float) -> Self { self._focused_graphics().background_alpha = background_alpha; self }
    focus_overlay_color(overlay_color: Color) -> Self { self._focused_graphics().overlay_color = overlay_color; self }
    focus_overlay_alpha(overlay_alpha: float) -> Self { self._focused_graphics().overlay_alpha = overlay_alpha; self }
    focus_image_url(image_url: string) -> Self { self._focused_graphics().image_url = image_url; self }
    focus_image_scale(image_scale: float) -> Self { self._focused_graphics().image_scale = image_scale; self }
    focus_image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self {
        self._focused_graphics().image_sprite_count_per_row = image_sprite_count_per_row;
        self._focused_graphics().image_sprite_count_per_column = image_sprite_count_per_column;
        self
    }
    focus_image_sprite_index(image_sprite_index: int) -> Self { self._focused_graphics().image_sprite_index = image_sprite_index; self }
    focus_animation_start_time(animation_start_time: float) -> Self { self._focused_graphics().animation_start_time = animation_start_time; self }
    focus_animation_current_time(animation_current_time: float) -> Self { self._focused_graphics().animation_current_time = animation_current_time; self }
    focus_animation_duration(animation_duration: float) -> Self { self._focused_graphics().animation_duration = animation_duration; self }
    focus_text(text: string) -> Self { self._focused_graphics().text = text; self }
    focus_text_font(text_font: Font) -> Self { self._focused_graphics().text_font = text_font; self }
    focus_text_size(text_size: DisplaySize) -> Self { self._focused_graphics().text_size = text_size; self }
    focus_text_color(text_color: Color) -> Self { self._focused_graphics().text_color = text_color; self }
    focus_text_alpha(text_alpha: float) -> Self { self._focused_graphics().text_alpha = text_alpha; self }
    focus_text_padding(text_padding: DisplaySize) -> Self { self._focused_graphics().text_padding = text_padding; self }
    focus_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._focused_graphics().text_horizontal_align = text_horizontal_align; self }
    focus_text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._focused_graphics().text_vertical_align = text_vertical_align; self }
    focus_text_bold(text_bold: bool) -> Self { self._focused_graphics().text_bold = text_bold; self }
    focus_text_italic(text_italic: bool) -> Self { self._focused_graphics().text_italic = text_italic; self }
    focus_text_cursor_index(text_cursor_index: int) -> Self { self._focused_graphics().text_cursor_index = text_cursor_index; self }
    focus_shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._focused_graphics().shrink_to_fit_text = shrink_to_fit_text; self }
    focus_detectable(detectable: bool) -> Self { self._focused_graphics().detectable = detectable; self }
    focus_cursor(cursor: Cursor) -> Self { self._focused_graphics().cursor = cursor; self }

    disabled_shape(shape: Shape) -> Self { self._disabled_graphics().shape = shape; self }
    disabled_anchor(anchor: Anchor) -> Self { self._disabled_graphics().anchor = anchor; self }
    disabled_border_radius(border_radius: DisplaySize) -> Self { self._disabled_graphics().border_radius = border_radius; self }
    disabled_border_width(border_width: DisplaySize) -> Self { self._disabled_graphics().border_width = border_width; self }
    disabled_border_dash_length(border_dash_length: DisplaySize) -> Self { self._disabled_graphics().border_dash_length = border_dash_length; self }
    disabled_border_gap_length(border_gap_length: DisplaySize) -> Self { self._disabled_graphics().border_gap_length = border_gap_length; self }
    disabled_border_color(border_color: Color) -> Self { self._disabled_graphics().border_color = border_color; self }
    disabled_border_alpha(border_alpha: float) -> Self { self._disabled_graphics().border_alpha = border_alpha; self }
    disabled_background_color(background_color: Color) -> Self { self._disabled_graphics().background_color = background_color; self }
    disabled_background_alpha(background_alpha: float) -> Self { self._disabled_graphics().background_alpha = background_alpha; self }
    disabled_overlay_color(overlay_color: Color) -> Self { self._disabled_graphics().overlay_color = overlay_color; self }
    disabled_overlay_alpha(overlay_alpha: float) -> Self { self._disabled_graphics().overlay_alpha = overlay_alpha; self }
    disabled_image_url(image_url: string) -> Self { self._disabled_graphics().image_url = image_url; self }
    disabled_image_scale(image_scale: float) -> Self { self._disabled_graphics().image_scale = image_scale; self }
    disabled_image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self {
        self._disabled_graphics().image_sprite_count_per_row = image_sprite_count_per_row;
        self._disabled_graphics().image_sprite_count_per_column = image_sprite_count_per_column;
        self
    }
    disabled_image_sprite_index(image_sprite_index: int) -> Self { self._disabled_graphics().image_sprite_index = image_sprite_index; self }
    disabled_animation_start_time(animation_start_time: float) -> Self { self._disabled_graphics().animation_start_time = animation_start_time; self }
    disabled_animation_current_time(animation_current_time: float) -> Self { self._disabled_graphics().animation_current_time = animation_current_time; self }
    disabled_animation_duration(animation_duration: float) -> Self { self._disabled_graphics().animation_duration = animation_duration; self }
    disabled_text(text: string) -> Self { self._disabled_graphics().text = text; self }
    disabled_text_font(text_font: Font) -> Self { self._disabled_graphics().text_font = text_font; self }
    disabled_text_size(text_size: DisplaySize) -> Self { self._disabled_graphics().text_size = text_size; self }
    disabled_text_color(text_color: Color) -> Self { self._disabled_graphics().text_color = text_color; self }
    disabled_text_alpha(text_alpha: float) -> Self { self._disabled_graphics().text_alpha = text_alpha; self }
    disabled_text_padding(text_padding: DisplaySize) -> Self { self._disabled_graphics().text_padding = text_padding; self }
    disabled_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._disabled_graphics().text_horizontal_align = text_horizontal_align; self }
    disabled_text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._disabled_graphics().text_vertical_align = text_vertical_align; self }
    disabled_text_bold(text_bold: bool) -> Self { self._disabled_graphics().text_bold = text_bold; self }
    disabled_text_italic(text_italic: bool) -> Self { self._disabled_graphics().text_italic = text_italic; self }
    disabled_text_cursor_index(text_cursor_index: int) -> Self { self._disabled_graphics().text_cursor_index = text_cursor_index; self }
    disabled_shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._disabled_graphics().shrink_to_fit_text = shrink_to_fit_text; self }
    disabled_detectable(detectable: bool) -> Self { self._disabled_graphics().detectable = detectable; self }
    disabled_cursor(cursor: Cursor) -> Self { self._disabled_graphics().cursor = cursor; self }

    // GENERATION STOP

    dyn __to_debug_string_dyn(set: Set<int>) -> string{
        "<VIEW>"
    }
}

fn push_callback<S, T>(owner: S, array: T[], value: T?) -> S {
    if value {
        array.push(value);
    }

    owner
}

class CollectAccumulator<T> {
    result: T[],
    callback: fn(View)(T)
}