const TITLE_BAR_HEIGHT = .15;
const TITLE_TEXT_SIZE = .8h;
const USERNAME_TEXT_SIZE = .5h;

export view LobbyScreen {
    title: string,
    background_color : Color,
    text_font: Font,
    title_color : Color,

    _displayLoginPanel() {
        self.layout()
            .move_to(0.5, 0.5)
            .resize_from_height(0.1, 5)
            .towards_bottom()
            .inner_margin(20)
            .push(UsernameTextBox)
            .push(LoginButton)
    }

    _displayUserInfo(user: QuickGameUser) {
        let username_label = Label {
            text: user.name,
            text_size: USERNAME_TEXT_SIZE,
            background_color: Color::blue(),
        };

        self.layout()
            .move_top_right()
            .resize_from_height(TITLE_BAR_HEIGHT, 2)
            .push(username_label)
    }

    @OnRender {
        let is_user_connected = evt.client.user is QuickGameUser(user) && user.name;
        let title_label = Label {
            text: self.title,
            text_color: self.title_color,
            text_font: self.text_font,
            background_color: Color::orange()
        };

        self.background_color(self.background_color);
        self.layout()
            .move_to(0.5, 0)
            .towards_bottom()
            .scale_y(TITLE_BAR_HEIGHT)
            .push(title_label)
        
        if is_user_connected {
            self._displayUserInfo(user);
        } else {
            self._displayLoginPanel();
        }
    }

    @OnKeyboardEvent {
        if evt.action != KeyboardAction::Down {
            return;
        }

        if evt.code == KeyCode::Tab {
            if evt.shift_key {
                self.client().focus_prev();
            } else {
                self.client().focus_next();
            }
            intercept;
        }
    }
}

fn log<T>(value: T) -> bool {
    @dbg(value);
    true
}