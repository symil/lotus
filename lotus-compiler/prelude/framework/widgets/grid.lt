export view Grid {
    items: View[] = [],
    item_count_per_row: int = none,
    item_count_per_column: int = none,
    item_aspect_ratio: float = 1,
    margin: DisplaySize = none,
    outer_margin: DisplaySize = none,
    inner_margin: DisplaySize = none,
    outer_horizontal_margin: DisplaySize = none,
    outer_vertical_margin: DisplaySize = none,
    inner_horizontal_margin: DisplaySize = none,
    inner_vertical_margin: DisplaySize = none,

    @OnRender {
        let row_size = self.item_count_per_row.to_float();
        let column_size = self.item_count_per_column.to_float();
        let item_count = self.items.len().max(1).to_float();

        if !row_size && !column_size {
            row_size = item_count.sqrt().ceil();
            column_size = row_size;
        } else if !column_size {
            column_size = (item_count / row_size).ceil();
        } else if !row_size {
            row_size = (item_count / column_size).ceil();
        }

        let parent_rect = self.rect();
        let item_rect = Rect {
            width: parent_rect.width / row_size,
            height: parent_rect.height / column_size
        }.strip_to_match_aspect_ratio(self.item_aspect_ratio);

        let input_outer_horizontal_margin = self.outer_horizontal_margin || self.outer_margin || self.margin;
        let input_outer_vertical_margin = self.outer_vertical_margin || self.outer_margin || self.margin;
        let input_inner_horizontal_margin = self.inner_horizontal_margin || self.inner_margin || self.margin;
        let input_inner_vertical_margin = self.inner_vertical_margin || self.inner_margin || self.margin;

        let outer_horizontal_margin = input_outer_horizontal_margin.resolve(item_rect.width, item_rect.height, 1);
        let outer_vertical_margin = input_outer_vertical_margin.resolve(item_rect.width, item_rect.height, 1);
        let inner_horizontal_margin = input_inner_horizontal_margin.resolve(item_rect.width, item_rect.height, 1);
        let inner_vertical_margin = input_inner_vertical_margin.resolve(item_rect.width, item_rect.height, 1);
        let max_item_width = (parent_rect.width - (2f * outer_horizontal_margin) - ((row_size - 1) * inner_horizontal_margin)) / row_size;
        let max_item_height = (parent_rect.height - (2f * outer_vertical_margin) - ((column_size - 1) * inner_vertical_margin)) / column_size;
        let x_start = parent_rect.x1();
        let y_start = parent_rect.y1();

        item_rect = Rect {
            width: max_item_width,
            height: max_item_height
        }.strip_to_match_aspect_ratio(self.item_aspect_ratio);

        for [i, item] in self.items {
            let x_index = i % row_size.to_int();
            let y_index = i / row_size.to_int();

            item_rect.x = x_start + outer_horizontal_margin + x_index.to_float() * (inner_horizontal_margin + max_item_width) + (max_item_width / 2);
            item_rect.y = y_start + outer_vertical_margin + y_index.to_float() * (inner_vertical_margin + max_item_height) + (max_item_height / 2);

            item.rect().set(item_rect);
            self.add_child(item);
        }
    }
}