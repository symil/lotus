export type(i32) string {
    type Item = char;

    static __create(length: int) -> string {
        let result = @alloc(length + 2);

        result[0] = length;
        result[1] = 0;

        (result as string)
    }

    static default() -> string {
        ""
    }

    static type_name() -> string {
        #TYPE_NAME
    }

    static __none() -> string {{
        (i32.const 0)
    }}

    __is_none() -> bool {{
        (i32.eqz)
    }}

    _header() -> ptr {
        this as ptr
    }

    _content() -> Pointer<char> {
        (this as Pointer<char>).add(2)
    }

    __hash() -> int {
        let header = this._header();
        let hash = header[1];

        if hash == 0 {
            hash = 1;

            for c in this {
                hash += c.__hash();
            }

            hash &= 0x3fffffff;

            header[1] = hash;
        }

        hash
    }

    __set_char(index: int, c: char) -> string {
        this._content()[index] = c;

        this
    }

    get_at(index: int) -> char {
        this._content()[index]
    }

    get_iterable_len() -> int {
        this.len()
    }

    get_iterable_ptr() -> Pointer<char> {
        this._content()
    }

    add(other: string) -> string {
        let new_string = string::__create(this.len() + other.len());
        let new_content =  new_string._content();

        this._content().copy_to(new_content, this.len());
        other._content().copy_to(new_content.add(this.len()), other.len());

        new_string
    }

    eq(other: string) -> bool {
        let hash_1 = this.__hash();
        let hash_2 = other.__hash();

        hash_1 == hash_2
    }

    ne(other: string) -> bool {
        !this.eq(other)
    }

    len() -> int {
        (this as ptr)[0]
    }

    to_string() -> string {
        this
    }

    to_debug_string(set: Set<ptr>) -> string {
        if this.__is_none() {
            return "none";
        }

        let result = string::__create(this.len() + 2);

        result.__set_char(0, '"');
        result.__set_char(this.len() + 1, '"');

        this._content().copy_to(result._content().add(1), this.len());

        result
    }

    is_empty() -> bool {
        this.len() == 0
    }

    pad_start(c: char, target_length: int) -> string {
        match this.len() >= target_length {
            true => this,
            false => {
                let result = string::__create(target_length);
                let start = target_length - this.len();

                for i in 0..start {
                    result.__set_char(i, c);
                }

                this._content().copy_to(result._content().add(start), this.len());

                result
            }
        }
    }

    find(str: string, index: int) -> int? {
        let max_len = this.len() - str.len() + 1;

        for i in index..max_len {
            if this.starts_with(str, i) {
                return i;
            }
        }

        none
    }

    contains(str: string) -> bool {
        !!this.find(str, 0)
    }

    starts_with(str: string, index: int) -> bool {
        if index + str.len() > this.len() {
            false
        } else {
            for i in 0..str.len() {
                if this[index + i] != str[i] {
                    return false;
                }
            }

            true
        }
    }

    substring(start: int?, end: int?) -> string {
        let length = this.len();

        if (!start) {
            start = 0;
        }

        if (!end) {
            end = length;
        }

        if start < 0 {
            start = length + start;
        }

        if end < 0 {
            end = length + end;
        }

        start = start.min(length);
        end = end.min(length);

        if end <= start {
            return "";
        }

        let result_length = end - start;
        let result = string::__create(result_length);

        this._content().add(start).copy_to(result._content(), result_length);

        result
    }

    split(separator: string) -> string[] {
        if this.len() == 0 {
            return [];
        }

        let result : string[] = [];
        let separator_length = separator.len();

        if separator_length == 0 {
            for c in this {
                result.push(c.to_string());
            }
        } else {
            let start = 0;
            let index = this.find(separator, 0);

            while index {
                result.push(this.substring(start, index));
                start = index + separator_length;
                index = this.find(separator, start);
            }

            result.push(this.substring(start, none));
        }

        result
    }

    indent(tab_length: int) -> string {
        let lines = this.split("\n");
        let tab = "".pad_start(' ', tab_length);

        for i in 0..lines.len() {
            lines[i] = tab + lines[i];
        }

        lines.join("\n")
    }

    __retain() {
        mem_retain(this as ptr);
    }

    __serialize(buffer: Buffer) {
        if buffer.save_addr(this) {
            buffer.push(this.len());
            
            for c in this {
                buffer.push(c.to_int());
            }
        }
    }

    static __deserialize(buffer: Buffer) -> string? {
        let addr = buffer.read();

        if !addr || addr == 0 {
            return none;
        }

        let str : string = buffer.retrieve(addr);

        if (str) {
            return str;
        }

        let length = buffer.read();
        str = string::__create(length);

        buffer.register(addr, str);

        for i in 0..length {
            str.__set_char(i, char::__deserialize(buffer));
        }

        str
    }
}