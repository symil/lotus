export type(f32) float {
    __add(float) -> float {{ f32.add }}
    __sub(float) -> float {{ f32.sub }}
    __mul(float) -> float {{ f32.mul }}
    __div(float) -> float {{ f32.div }}
    __eq(float) -> bool {{ f32.eq }}
    __ne(float) -> bool {{ f32.ne }}
    __ge(float) -> bool {{ f32.ge }}
    __gt(float) -> bool {{ f32.gt }}
    __le(float) -> bool {{ f32.le }}
    __lt(float) -> bool {{ f32.lt }}

    as_int() -> int {{ i32.reinterpret_f32 }}
    to_int() -> int {{ i32.trunc_f32_s }}
    to_float() -> float {{ }}

    abs() -> float {{ f32.abs }}
    neg() -> float {{ f32.neg }}
    ceil() -> float {{ f32.ceil }}
    floor() -> float {{ f32.floor }}
    trunc() -> float {{ f32.trunc }}
    round() -> float {{ f32.nearest }}
    sqrt() -> float {{ f32.sqrt }}
    min(float) -> float {{ f32.min }}
    max(float) -> float {{ f32.max }}

    sign() -> int {
        if self < 0f {
            -1
        } else if self > 0f {
            1
        } else {
            0
        }
    }

    static __default() -> float {{
        (f32.const 0)
    }}

    static __type_name() -> string {
        #TYPE_NAME
    }

    static __none() -> float {{
        (f32.const nan:0x200000)
    }}

    __is_none() -> bool {{
        i32.reinterpret_f32
        (f32.const nan:0x200000)
        i32.reinterpret_f32
        (i32.eq)
    }}

    __hash() -> int {
        self.as_int().__hash()
    }

    is_nan() -> bool {
        !(self == self)
    }

    to_string() -> string {
        if self.__is_none() {
            return "none";
        }

        let result = @alloc(16);

        call_float_to_string(self, result);

        result as string
    }

    __to_debug_string(set: Set<ptr>) -> string {
        if self.__is_none() {
            return "none";
        }

        self.to_string()
    }

    static __retain(Self) {{

    }}

    static __serialize(buffer: Buffer, value: Self) {
        buffer.write(value.as_int());
    }

    static __deserialize(buffer: Buffer) -> float? {
        buffer.read().as_float()
    }
}

fn call_float_to_string(float, ptr) {{
    (call $float_to_string)
}}