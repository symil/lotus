type EventTypeId = int;
type TargetTypeId = int;
type EventCallbackPriority = int;
type EventCallback = fn(Object, Object, EventOutput);
type EventCallbackMap = Map<int, Map<int, EventCallback[]>>;

export const EVENT_CALLBACKS = Map<EventTypeId, Map<EventCallbackPriority, Map<TargetTypeId, EventCallback[]>>>::new();

export class EventOutput {
    intercepted: bool,
    yielded: Object[],
}

sys fn insert_event_callback(event_type_id: int, callback_priority: int, target_type_id: int, callback: EventCallback) {
    let callback_priorities = EVENT_CALLBACKS.get_or_insert_with(event_type_id, () => Map<EventCallbackPriority, Map<TargetTypeId, EventCallback[]>>::new());
    let target_callbacks = callback_priorities.get_or_insert_with(callback_priority, () => Map<TargetTypeId, EventCallback[]>::new());
    let callback_list = target_callbacks.get_or_insert_with(target_type_id, () => []);

    callback_list.push(callback);
}

sys fn sort_event_callbacks() {
    for entry in EVENT_CALLBACKS {
        entry.value.sort((a, b) => b - a);
    }
}

pub fn emit_event(event: Object, targets: Object[]) {
    let output = EventOutput;
    let event_type_id = event.get_type_id();
    let event_map = EVENT_CALLBACKS.get(event_type_id);

    if !event_map {
        return;
    }

    for event_entry in event_map {
        let callback_map = event_entry.value;

        for target in targets {
            check trigger_event_callbacks(callback_map, event, target, output);
        }

        check trigger_event_callbacks(callback_map, event, event, output);
    }
}

pub fn trigger_event_callbacks(callback_map: Map<TargetTypeId, EventCallback[]>, event: Object, target: Object, output: EventOutput) -> bool {
    let callback_list = callback_map.get(target.get_type_id());

    if !callback_list {
        return true;
    }

    for callback in callback_list {
        output.yielded.clear();

        callback(target, event, output);

        for object in output.yielded {
            event.yield(object);
        }

        if output.intercepted {
            return false;
        }
    }

    true
}