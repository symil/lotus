export type(i32) bool {
    __and(other: bool) -> bool {{ i32.and }}
    __or(other: bool) -> bool {{ i32.or }}
    __eq(other: bool) -> bool {{ i32.eq }}
    __ne(other: bool) -> bool {{ i32.ne }}
    __not() -> bool {{ i32.eqz }}
    to_int() -> int {{ }}

    static __default() -> bool {{ 
        (i32.const 0)
    }}

    static __type_name() -> string {
        #TYPE_NAME
    }

    static __type_id() -> int {
        #TYPE_ID
    }

    static __none() -> bool {{
        (i32.const 0)
    }}

    __is_none() -> bool {{
        (i32.eqz)
    }}

    __hash() -> int {
        (self as int).__hash()
    }

    to_string() -> string {
        match self {
            true => "true",
            false => "false"
        }
    }

    __to_debug_string(set: Set<ptr>) -> string {
        self.to_string()
    }

    static __retain(value: Self) {{
        
    }}

    static __serialize(buffer: Buffer, value: Self) {
        buffer.write(value.to_int());
    }

    static __deserialize(buffer: Buffer) -> bool? {
        buffer.read().to_bool()
    }

    static __serialize_with_schema(buffer: Buffer, value: Self) {
        buffer.write(TypeSchema::Int.as_int());
        buffer.write(value as int);
    }

    static __deserialize_with_schema(buffer: Buffer) -> Self? {
        let result : Self = none;

        match TypeSchema::__from_int(buffer.read()) {
            TypeSchema::Int => {
                result = buffer.read() > 0;
            },
            TypeSchema::Float => consume_float(buffer),
            TypeSchema::String => consume_string(buffer),
            TypeSchema::Object => consume_object(buffer),
        }

        result
    }
}