export type(i32) string {
    type Item = char;

    static __create(length: int) -> string {
        let result = @alloc(length + 2);

        result[0] = length;
        result[1] = 0;

        (result as string)
    }

    static __default() -> string {
        ""
    }

    static __type_name() -> string {
        #TYPE_NAME
    }

    static __none() -> string {{
        (i32.const 0)
    }}

    __is_none() -> bool {{
        (i32.eqz)
    }}

    _header() -> ptr {
        self as ptr
    }

    _content() -> Pointer<char> {
        (self as Pointer<char>).add(2)
    }

    __hash() -> int {
        let header = self._header();
        let hash = header[1];

        if hash == 0 {
            hash = 1;

            for c in self {
                hash += c.__hash();
            }

            hash &= 0x3fffffff;

            header[1] = hash;
        }

        hash
    }

    __set_char(index: int, c: char) -> string {
        self._content()[index] = c;

        self
    }

    __get_at_index(index: int) -> char {
        self._content()[index]
    }

    __get_iterable_len() -> int {
        self.len()
    }

    __get_iterable_ptr() -> Pointer<char> {
        self._content()
    }

    __add(other: string) -> string {
        if other.len() == 0 {
            return self;
        }

        let new_string = string::__create(self.len() + other.len());
        let new_content =  new_string._content();

        self._content().copy_to(new_content, self.len());
        other._content().copy_to(new_content.add(self.len()), other.len());

        new_string
    }

    __eq(other: string) -> bool {
        let hash_1 = self.__hash();
        let hash_2 = other.__hash();

        hash_1 == hash_2
    }

    __ne(other: string) -> bool {
        !self.__eq(other)
    }

    __get_ptr() -> ptr {
        (self as ptr)
    }

    len() -> int {
        (self as ptr)[0]
    }

    to_string() -> string {
        self
    }

    __to_debug_string(set: Set<ptr>) -> string {
        if self.__is_none() {
            return "none";
        }

        let result = string::__create(self.len() + 2);

        result.__set_char(0, '"');
        result.__set_char(self.len() + 1, '"');

        self._content().copy_to(result._content().add(1), self.len());

        result
    }

    is_empty() -> bool {
        self.len() == 0
    }

    pad_start(c: char, target_length: int) -> string {
        match self.len() >= target_length {
            true => self,
            false => {
                let result = string::__create(target_length);
                let start = target_length - self.len();

                for i in 0..start {
                    result.__set_char(i, c);
                }

                self._content().copy_to(result._content().add(start), self.len());

                result
            }
        }
    }

    find(str: string, index: int) -> int? {
        let max_len = self.len() - str.len() + 1;

        for i in index..max_len {
            if self.starts_with(str, i) {
                return i;
            }
        }

        none
    }

    contains(str: string) -> bool {
        !!self.find(str, 0)
    }

    starts_with(str: string, index: int) -> bool {
        if index + str.len() > self.len() {
            false
        } else {
            for i in 0..str.len() {
                if self[index + i] != str[i] {
                    return false;
                }
            }

            true
        }
    }

    substring(start: int?, end: int?) -> string {
        let length = self.len();

        if (!start) {
            start = 0;
        }

        if (!end) {
            end = length;
        }

        if start < 0 {
            start = length + start;
        }

        if end < 0 {
            end = length + end;
        }

        start = start.min(length);
        end = end.min(length);

        if end <= start {
            return "";
        }

        let result_length = end - start;
        let result = string::__create(result_length);

        self._content().add(start).copy_to(result._content(), result_length);

        result
    }

    split(separator: string) -> string[] {
        if self.len() == 0 {
            return [];
        }

        let result : string[] = [];
        let separator_length = separator.len();

        if separator_length == 0 {
            for c in self {
                result.push(c.to_string());
            }
        } else {
            let start = 0;
            let index = self.find(separator, 0);

            while index {
                result.push(self.substring(start, index));
                start = index + separator_length;
                index = self.find(separator, start);
            }

            result.push(self.substring(start, none));
        }

        result
    }

    indent(tab_length: int) -> string {
        let lines = self.split("\n");
        let tab = "".pad_start(' ', tab_length);

        for i in 0..lines.len() {
            lines[i] = tab + lines[i];
        }

        lines.join("\n")
    }

    static __retain(value: Self) {
        retain_memory(value as ptr);
    }

    static __serialize(buffer: Buffer, value: Self) {
        if buffer.write_string_hash(value) {
            buffer.write(value.len());
            
            for c in value {
                buffer.write(c.as_int());
            }
        }
    }

    static __deserialize(buffer: Buffer) -> string? {
        let addr = buffer.read();

        if !addr || addr == 0 {
            return none;
        }

        let str : string = buffer.retrieve_local_string(addr);

        if (str) {
            return str;
        }

        let length = buffer.read();
        str = string::__create(length);

        for i in 0..length {
            str.__set_char(i, char::__deserialize(buffer));
        }
        
        buffer.register_local_string(str);

        str
    }

    static __serialize_with_schema(buffer: Buffer, value: Self) {
        buffer.write(TypeSchema::String.as_int());

        if buffer.write_string_hash(value) {
            buffer.write(value.len());

            for c in value {
                buffer.write(c.as_int());
            }
        }
    }

    static __serialize_with_schema_no_header(buffer: Buffer, value: Self) {
        let hash = value.__hash();

        if buffer.write_string_hash(value) {
            buffer.write(value.len());

            for c in value {
                buffer.write(c.as_int());
            }
        }
    }

    static __deserialize_with_schema(buffer: Buffer) -> Self? {
        @todo()
    }
}

sys fn join_strings(strings: string[]) -> string {
    let total_length = strings.reduce(0, (acc, str) => acc + str.len());
    let result = string::__create(total_length);
    let result_content = result._content();
    let index = 0;

    for str in strings {
        str._content().copy_to(result_content.add(index), str.len());
        index += str.len();
    }

    result
}