export type(void) system {
    static __init() {
        notify_end_of_global_allocs();
    }

    alloc(block_size: int) -> ptr {
        mem_alloc(block_size)
    }

    free(pointer: ptr) {
        mem_free(pointer);
    }

    retain<T>(value: T) {
        value.__retain();
    }

    collect_garbage() {
        mem_trigger_garbage_collection();
    }

    log<T>(value: T) {
        let str = value.to_string();

        wasm_log(str);
    }

    get_debug_string<T>(value: T) -> string {
        value.to_debug_string(Set<ptr>::new())
    }

    dbg<T>(value: T) {
        wasm_log(@get_debug_string(value));
    }

    serialize<T>(value: T) -> int[] {
        let buffer = Buffer {};

        value.__serialize(buffer);

        buffer.consume()
    }

    deserialize<T>(array: int[]) -> T? {
        let buffer = Buffer::from_array(array);
        let value = T::__deserialize(buffer);

        match buffer.read_overflow {
            true => none,
            false => value
        }
    }

    int<T>(value: T) {
        @log(value as int);
    }

    type<T>(value: T) {
        @log(#FIRST_ARG_TYPE);
    }
}

fn wasm_log(string) {{
    (call $log)
}}