export class Buffer {
    data: ptr,
    size: int,
    capacity: int,
    read_index: int,
    serialized_strings: Set<string>,
    remote_addr_to_local_string: Map<int, string>,
    serialized_objects: Set<Object>,
    remote_addr_to_local_object: Map<int, Object>,
    local_object_to_remote_addr: Map<Object, int>
    context: Object?

    static new() -> Buffer {
        Buffer
    }

    static with_capacity(capacity: int) -> Buffer {
        let data = @alloc(capacity);

        Self { data, capacity }
    }

    static from_array(array: int[]) -> Buffer {
        Buffer {
            data: array.body(),
            size: array.len(),
            capacity: array.capacity()
        }
    }

    set_local_object_to_remote_addr_map(map: Map<Object, int>?) {
        self.local_object_to_remote_addr = map || Map<Object, int>::new();
    }

    get_local_object_to_remote_addr_map() -> Map<Object, int> {
        self.local_object_to_remote_addr
    }

    get_remote_addr(local_object: Object) -> int? {
        self.local_object_to_remote_addr.get(local_object)
    }

    clear() {
        self.size = 0;
        self.read_index = 0;
        self.serialized_objects.clear();
        self.remote_addr_to_local_object.clear();
        self.local_object_to_remote_addr.clear();
        self.context = none;
    }

    write_string_hash(str: string) -> bool {
        self.write(str.__hash());

        self.serialized_strings.add(str)
    }

    retrieve_local_string(string_hash: int) -> string? {
        self.remote_addr_to_local_string.get(string_hash)
    }

    register_local_string(local_string: string) {
        self.remote_addr_to_local_string.set(local_string.__hash(), local_string);
    }

    write_object_addr(object: Object) -> bool {
        self.write(object as int);

        self.serialized_objects.add(object)
    }

    mark_object_as_serialized(object: Object) -> bool {
        self.serialized_objects.add(object)
    }

    retrieve_local_object(remote_addr: int) -> Object? {
        self.remote_addr_to_local_object.get(remote_addr)
    }

    register_local_object(remote_addr: int, local_object: Object) {
        self.remote_addr_to_local_object.set(remote_addr, local_object);
        self.local_object_to_remote_addr.set(local_object, remote_addr);
    }

    write(value: int) {
        if self.size == self.capacity {
            let new_capacity = (self.capacity + 1).next_power_of_4();
            let new_buffer = @alloc(new_capacity);

            if !self.data.is_null() {
                self.data.copy_to(new_buffer, self.size);
            }

            self.capacity = new_capacity;
            self.data = new_buffer;
        }

        self.write_unchecked(value)
    }

    write_unchecked<T>(value: T) {
        (self.data as Pointer<T>)[self.size] = value;
        self.size += 1;
    }

    read() -> int? {
        if self.read_index >= self.size {
            self.read_index = self.size + 1;
            none
        } else {
            self.read_unchecked()
        }
    }

    read_unchecked<T>() -> T {
        let result = (self.data as Pointer<T>)[self.read_index];
        self.read_index += 1;
        result
    }

    read_buffer_unchecked() -> int[] {
        let length : int = self.read_unchecked();
        let pointer = @alloc(length);

        self.data.add(self.read_index).copy_to(pointer, length);
        self.read_index += length;

        Array<int>::from_raw_parts(pointer, length, length)
    }

    has_read_overflow() -> bool {
        self.read_index > self.size
    }

    is_finished() -> bool {
        self.read_index >= self.size
    }

    consume() -> int[] {
        Array<int>::from_raw_parts(self.data, self.size, self.capacity)
    }
}