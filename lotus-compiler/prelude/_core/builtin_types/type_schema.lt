pub enum TypeSchema {
    Int,
    Float,
    String,
    Object
}

pub fn consume_int(buffer: Buffer) {
    buffer.read();
}

pub fn consume_float(buffer: Buffer) {
    buffer.read();
}

pub fn consume_string(buffer: Buffer) {
    string::__deserialize_with_schema_without_header(buffer);
}

pub fn consume_object(buffer: Buffer) {
    Object::__deserialize_with_schema_without_header(buffer);
}

pub fn consume_array(buffer: Buffer) {
    let item_count = buffer.read();

    for i in 0..item_count {
        consume_item(buffer);
    }
}

pub fn consume_item(buffer: Buffer) {
    let item_type = TypeSchema::__from_int(buffer.read());

    match item_type {
        TypeSchema::Int => consume_int(buffer),
        TypeSchema::Float => consume_float(buffer),
        TypeSchema::String => consume_string(buffer),
        TypeSchema::Object => consume_object(buffer),
    }
}