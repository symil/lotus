sys type(i32) Enum {
    eq(other: This) -> bool {{
        i32.eq
    }}

    ne(other: This) -> bool {{
        i32.ne
    }}

    autogen static __default() -> This {{
        (i32.const -2147483648)
    }}

    autogen static __none() -> This {{
        (i32.const -2147483648)
    }}

    __is_none() -> bool {{
        (i32.const -2147483648)
        (i32.eq)
    }}

    autogen static type_name() -> string {
        #TYPE_NAME
    }

    autogen to_string() -> string {
        let int_value = this as int;

        // Really ugly & inefficient but it will do for now
        iter_variants {
            if int_value == #VARIANT_VALUE {
                return #VARIANT_NAME;
            }
        }

        "none"
    }

    autogen to_debug_string(set: Set<ptr>) -> string {
        this.to_string()
    }

    autogen __retain() {{

    }}

    autogen __serialize(buffer: Buffer) {
        buffer.push(this as int);
    }

    autogen static __deserialize(buffer: Buffer) -> This? {
        let int_value = buffer.read();
        let ok = int_value >= 0 && int_value < #VARIANT_COUNT;

        match ok {
            true => int_value as This,
            false => none
        }
    }
}