sys type(i32) Enum {
    __eq(other: Self) -> bool {{
        i32.eq
    }}

    __ne(other: Self) -> bool {{
        i32.ne
    }}

    to_int() -> int {
        self as int
    }

    static from_int(value: int) -> Self {
        match value < 0 || value >= #VARIANT_COUNT {
            true => none,
            false => value as Self
        }
    }

    autogen static __default() -> Self {{
        (i32.const -2147483648)
    }}

    autogen static __none() -> Self {{
        (i32.const -2147483648)
    }}

    __is_none() -> bool {{
        (i32.const 0)
        (i32.lt_s)
    }}

    autogen static __type_name() -> string {
        #TYPE_NAME
    }

    autogen to_string() -> string {
        let int_value = self as int;

        // Really ugly & inefficient but it will do for now
        iter_variants {
            if int_value == #VARIANT_VALUE {
                return #VARIANT_NAME;
            }
        }

        "none"
    }

    autogen __to_debug_string(set: Set<ptr>) -> string {
        self.to_string()
    }

    autogen static __retain(Self) {{

    }}

    autogen static __serialize(buffer: Buffer, value: Self) {
        buffer.write(value as int);
    }

    autogen static __deserialize(buffer: Buffer) -> Self? {
        let int_value = buffer.read();
        let ok = int_value >= 0 && int_value < #VARIANT_COUNT;

        match ok {
            true => int_value as Self,
            false => none
        }
    }
}