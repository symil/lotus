export type ptr = Pointer<int>;

export type(i32) Pointer<T> {
    type Item = T;

    static __default() -> Self {{
        (i32.const 0)
    }}

    static __type_name() -> string {
        #TYPE_NAME
    }

    static __none() -> Self {{
        (i32.const 0)
    }}

    __is_none() -> bool {{
        i32.eqz
    }}

    __hash() -> int {
        (self as int).__hash()
    }

    is_null() -> bool {{
        i32.eqz
    }}

    __eq(other: Self) -> bool {{
        i32.eq
    }}

    __ne(other: Self) -> bool {{
        i32.ne
    }}

    add(offset: int) -> Self {
        ((self as int) + offset) as Self
    }

    addr() -> int {
        self as int
    }

    __set_at(index: int, value: T) {
        let byte_index = ((self as int) + index) * 4;

        wasm_store(byte_index, value);
    }

    __get_at(index: int) -> T {
        let byte_index = ((self as int) + index) * 4;

        wasm_load(byte_index)
    }

    print() {{
        (call $__log_int)
    }}

    copy_to(target: Self, data_size: int) {
        copy_memory_range(target as ptr, self as ptr, data_size);
    }

    to_string() -> string {
        if self.__is_none() {
            return "none";
        }

        "[Pointer " + (self as int).to_hexa_string() + "]"
    }

    __to_debug_string(set: Set<ptr>) -> string {
        if self.__is_none() {
            return "none";
        }

        (self as int).to_hexa_string()
    }

    static __retain(value: Self) {
        retain_memory(value as ptr);
    }

    static __serialize(buffer: Buffer, value: Self) {
        buffer.write(value as int);
    }

    static __deserialize(buffer: Buffer) -> Self? {
        buffer.read() as Self
    }

    swap(i: int, j: int) {
        let tmp = self[i];
        self[i] = self[j];
        self[j] = tmp;
    }
}

fn copy_memory_range(dest: ptr, src: ptr, count: int) {
    let dest_arg = (dest as int) * 4;
    let src_arg = (src as int) * 4;
    let count_arg = count * 4;

    wasm_memory_copy(dest_arg, src_arg, count_arg);
}

fn wasm_memory_copy(dest_byte_offset: int, src_byte_offset: int, range_byte_count: int) {{
    memory.copy
}}

fn wasm_store<T>(byte_offset: int, value: T) {{
    <T>.store
}}

fn wasm_load<T>(byte_offset: int) -> T {{
    <T>.load
}}