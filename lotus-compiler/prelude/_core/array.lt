export type(i32) Array<T> {
    type Item = T;

    eq(other: Self) -> bool {{
        i32.eq
    }}

    ne(other: Self) -> bool {{
        i32.ne
    }}

    add(other: Self) -> Self {
        self.concat(other)
    }

    static type_name() -> string {
        #TYPE_NAME
    }

    static default() -> Self {
        Self::__create(0)
    }

    static __none() -> Self {{
        (i32.const 0)
    }}

    __is_none() -> bool {{
        (i32.eqz)
    }}

    __hash() -> int {
        (self as int).__hash()
    }

    static __retain(value: Self) {
        if retain_memory(value.as_ptr()) {
            retain_memory(value.body() as ptr);

            for item in value {
                Item::__retain(item);
            }
        }
    }

    __serialize(buffer: Buffer) {
        if buffer.save_addr(self) {
            buffer.push(self.len());

            for item in self {
                item.__serialize(buffer);
            }
        }
    }

    static __deserialize(buffer: Buffer) -> Self? {
        let addr = buffer.read();

        if !addr || addr == 0 {
            return none;
        }

        let array : Self = buffer.retrieve(addr);

        if (array) {
            return array;
        }

        let length = buffer.read();
        array = Self::with_capacity(length);

        buffer.register(addr, array);

        for i in 0..length {
            array.push(T::__deserialize(buffer));
        }

        array
    }

    to_string() -> string {
        if self.__is_none() {
            return "none";
        }

        "[" + #TYPE_SHORT_NAME + " " + (self as int).to_hexa_string() + "]"
    }

    to_debug_string(set: Set<ptr>) -> string {
        if self.__is_none() {
            return "none";
        }

        let length = self.len();

        if length == 0 {
            return "[]";
        }

        let strings : string[] = [];
        let has_line_breaks = false;

        for item in self {
            let str = item.to_debug_string(set);

            if str.contains("\n") {
                has_line_breaks = true;
            }

            strings.push(str);
        }

        match has_line_breaks {
            true => "[\n" + strings.join(",\n").indent(2) + "\n]",
            false => "[ " + strings.join(", ") + " ]"
        }
    }

    static __create(length: int) -> Self {
        let capacity = length.next_power_of_4();
        let header = @alloc(4);
        let body = @alloc(capacity);

        header[0] = body as int;
        header[1] = length;
        header[2] = capacity;

        header as Self
    }

    static with_capacity(capacity: int) -> Self {
        capacity = capacity.next_power_of_4();
        let header = @alloc(4);
        let body = @alloc(capacity);

        header[0] = body as int;
        header[1] = 0;
        header[2] = capacity;

        header as Self
    }

    static from_raw_parts(pointer: Pointer<T>, length: int, capacity: int) -> Self {
        let header = @alloc(4);

        header[0] = pointer as int;
        header[1] = length;
        header[2] = capacity;

        header as Self
    }

    get_iterable_len() -> int {
        self.len()
    }

    get_iterable_ptr() -> Pointer<T> {
        self.body()
    }

    body() -> Pointer<T> {
        (self as ptr)[0] as Pointer<T>
    }

    len() -> int {
        (self as ptr)[1]
    }

    capacity() -> int {
        (self as ptr)[2]
    }

    get_at(index: int) -> T {
        let length = self.len();

        if index < 0 {
            index = length + index;
        }

        match index < 0 || index >= length {
            true => none,
            false => self.body()[index]
        }
    }

    set_at(index: int, value: T) {
        self.body().set_at(index, value);
    }

    first() -> T? {
        if self.is_empty() {
            return none;
        }

        self.get_at(0)
    }

    last() -> T ?{
        if self.is_empty() {
            return none;
        }

        self.get_at(self.len() - 1)
    }

    as_ptr() -> ptr {
        self as ptr
    }

    is_empty() -> bool {
        self.len() == 0
    }

    clone() -> Self {
        let result : Self = [];

        result.extend(self);

        result
    }

    reverse() -> Self {
        let length = self.len();
        let body = self.body();

        for i in 0..(length / 2) {
            let i2 = length - i - 1;
            let tmp = body[i];

            body[i] = body[i2];
            body[i2] = tmp;
        }

        self
    }

    clear() {
        let header = self as ptr;

        header[1] = 0;
    }

    _add_length(additional_length: int) -> int {
        let header = self as ptr;
        let current_length = self.len();
        let new_length = current_length + additional_length;

        if new_length > self.capacity() {
            let body = self.body();
            let new_capacity = self.capacity() * 4;
            let new_body = @alloc(new_capacity) as Pointer<T>;

            for i in 0..current_length {
                new_body[i] = body[i];
            }

            header[0] = new_body as int;
            header[2] = new_capacity;
        }

        header[1] = new_length;

        current_length
    }

    push(value: T) -> Self {
        let length = self._add_length(1);

        self.body()[length] = value;

        self
    }

    pop() -> Self {
        let header = self as ptr;
        let length = header[1];

        if length > 0 {
            header[1] = length - 1;
        }

        self
    }

    extend(other: Self) {
        let length = self._add_length(other.len());
        let body = self.body();

        for (i, item) in other {
            body[length + i] = item;
        }
    }

    extend_at(index: int, other: Self) {
        if other.is_empty() {
            return;
        }

        self.insert_none(index, other.len());
        let body = self.body();
        
        for (i, item) in other {
            body[index + i] = item;
        }
    }

    insert_at(index: int, item: Item) {
        self.insert_none(index, 1);
        self[index] = item;
    }

    insert_none(index: int, count: int) {
        let length = self._add_length(count);
        let body = self.body();

        for i in 0..count {
            let i2 = count - i - 1;
            body[index + count + i2] = body[index + i2];
        }

        for i in 0..count {
            body[index + i] = none;
        }
    }

    concat(other: Self) -> Self {
        let new_array = Self::__create(self.len() + other.len());
        let new_body = new_array.body();

        let offset = 0;

        for item in self {
            new_body[offset] = item;
            offset += 1;
        }

        for item in other {
            new_body[offset] = item;
            offset += 1;
        }

        new_array
    }

    join(separator: string) -> string {
        let str = "";
        let length = self.len();

        if length > 0 {
            let last_index = length - 1;
            let i = 0;

            for item in self {
                str += item.to_string();

                if i != last_index {
                    str += separator;
                }

                i += 1;
            }
        }

        str
    }

    filter(callback: fn(T)(bool)) -> T[] {
        let result : T[] = [];

        for item in self {
            if callback(item) {
                result.push(item);
            }
        }

        result
    }

    map<U>(callback: fn(T)(U)) -> U[] {
        let result : U[] = [];

        for item in self {
            result.push(callback(item));
        }

        result
    }

    reduce<U>(init: U, callback: fn(U, T)(U)) -> U {
        let result = init;

        for item in self {
            result = callback(result, item);
        }
        
        result
    }

    sort(compare: fn(T, T)(int)) -> Self {
        let secondary_keys = @alloc(self.len());

        for i in 0..self.len() {
            secondary_keys[i] = i;
        }

        quick_sort(self.body(), 0, self.len() - 1, compare, secondary_keys);

        self
    }
}

fn partition<T>(array: Pointer<T>, start_index: int, end_index: int, compare: fn(T, T)(int), secondary_keys: ptr) -> int {
    let pivot = array[end_index];
    let i = start_index - 1;

    for j in start_index..end_index {
        let compare_value = compare(array[j], pivot);

        if compare_value == 0 {
            compare_value = secondary_keys[j] - secondary_keys[end_index];
        }

        if compare_value <= 0 {
            i += 1;
            array.swap(i, j);
            secondary_keys.swap(i, j);
        }
    }

    array.swap(i + 1, end_index);
    secondary_keys.swap(i + 1, end_index);

    i + 1
}

fn quick_sort<T>(array: Pointer<T>, start_index: int, end_index: int, compare: fn(T, T)(int), secondary_keys: ptr) {
    if start_index < end_index {
        let middle_index = partition(array, start_index, end_index, compare, secondary_keys);

        quick_sort(array, start_index, middle_index - 1, compare, secondary_keys);
        quick_sort(array, middle_index + 1, end_index, compare, secondary_keys);
    }
}