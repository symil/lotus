export class Array<T> {
    type Item = T;

    body: Pointer<T>,
    length: int,
    capacity: int,

    add(other: Self) -> Self {
        self.concat(other)
    }

    static __none() -> Self {{
        (i32.const 0)
    }}

    static default() -> Self {
        Self::with_capacity(4)
    }

    static with_capacity(capacity: int) -> Self {
        Self {
            body: @alloc(capacity) as Pointer<T>,
            length: 0,
            capacity: capacity.next_power_of_4()
        }
    }

    static from_raw_parts(body: Pointer<T>, length: int, capacity: int) -> Self {
        Self { body, length, capacity }
    }

    body() -> Pointer<T> {
        self.body
    }

    len() -> int {
        self.length
    }

    capacity() -> int {
        self.capacity
    }

    get_iterable_len() -> int {
        self.length
    }

    get_iterable_ptr() -> Pointer<T> {
        self.body
    }

    get_at(index: int) -> T {
        let length = self.length;

        if index < 0 {
            index = length + index;
        }

        match index < 0 || index >= length {
            true => none,
            false => self.body[index]
        }
    }

    set_at(index: int, value: T) {
        self.body.set_at(index, value);
    }

    first() -> T? {
        if self.is_empty() {
            return none;
        }

        self.get_at(0)
    }

    last() -> T? {
        if self.is_empty() {
            return none;
        }

        self.get_at(self.length - 1)
    }

    is_empty() -> bool {
        self.length == 0
    }

    clone() -> Self {
        let result : Self = [];

        result.extend(self);

        result
    }

    reverse() -> Self {
        for i in 0..(self.length / 2) {
            let i2 = self.length - i - 1;
            let tmp = self.body[i];

            self.body[i] = self.body[i2];
            self.body[i2] = tmp;
        }

        self
    }

    clear() {
        self.length = 0;
    }

    _add_length(additional_length: int) -> int {
        let current_length = self.length;
        let new_length = current_length + additional_length;

        if new_length > self.capacity {
            let current_body = self.body;
            let new_capacity = self.capacity * 4;
            let new_body = @alloc(new_capacity) as Pointer<T>;

            current_body.copy_to(new_body, current_length);

            self.body = new_body;
            self.capacity = new_capacity;
        }

        self.length = new_length;

        current_length
    }

    push(value: T) -> Self {
        let length = self._add_length(1);

        self.body[length] = value;

        self
    }

    push_unchecked(value: T) {
        self.body[self.length] = value;
        self.length += 1;
    }

    pop() -> Self {
        if self.length > 0 {
            self.length -= 1;
        }

        self
    }

    extend(other: Self) {
        let length = self._add_length(other.len());
        let body = self.body;

        for (i, item) in other {
            body[length + i] = item;
        }
    }

    extend_at(index: int, other: Self) {
        if other.is_empty() {
            return;
        }

        self.insert_none(index, other.len());
        let body = self.body;
        
        for (i, item) in other {
            body[index + i] = item;
        }
    }

    insert_at(index: int, item: T) {
        self.insert_none(index, 1);
        self[index] = item;
    }

    insert_none(index: int, count: int) {
        let length = self._add_length(count);
        let body = self.body;

        for i in 0..count {
            let i2 = count - i - 1;
            body[index + count + i2] = body[index + i2];
        }

        for i in 0..count {
            body[index + i] = none;
        }
    }

    concat(other: Self) -> Self {
        let new_array = Self::with_capacity(self.length + other.length);

        for item in self {
            new_array.push_unchecked(item);
        }

        for item in other {
            new_array.push_unchecked(item);
        }

        new_array
    }

    join(separator: string) -> string {
        let str = "";
        let length = self.length;

        if length > 0 {
            let last_index = length - 1;
            let i = 0;

            for item in self {
                str += item.to_string();

                if i != last_index {
                    str += separator;
                }

                i += 1;
            }
        }

        str
    }

    filter(callback: fn(T)(bool)) -> T[] {
        let result : T[] = [];

        for item in self {
            if callback(item) {
                result.push(item);
            }
        }

        result
    }

    map<U>(callback: fn(T)(U)) -> U[] {
        let result : U[] = [];

        for item in self {
            result.push(callback(item));
        }

        result
    }

    reduce<U>(init: U, callback: fn(U, T)(U)) -> U {
        let result = init;

        for item in self {
            result = callback(result, item);
        }
        
        result
    }

    sort(compare: fn(T, T)(int)) -> Self {
        let secondary_keys = @alloc(self.length);

        for i in 0..self.length {
            secondary_keys[i] = i;
        }

        quick_sort(self.body, 0, self.length - 1, compare, secondary_keys);

        self
    }

    dyn __retain_dyn() {
        Pointer<T>::__retain(self.body);

        for item in self {
            T::__retain(item);
        }
    }

    dyn __serialize_dyn(buffer: Buffer) {
        if buffer.save_addr(self) {
            buffer.write(#TYPE_ID);
            buffer.write(self.length);

            for item in self {
                T::__serialize(buffer, item);
            }
        }
    }

    dyn __deserialize_dyn(buffer: Buffer) {
        let length = buffer.read();

        self.body = @alloc(length) as Pointer<T>;
        self.length = 0;
        self.capacity = length.next_power_of_4();

        for i in 0..length {
            self.push_unchecked(T::__deserialize(buffer));
        }
    }

    dyn __to_string_dyn() -> string {
        if self.__is_none() {
            return "none";
        }

        "[" + #TYPE_SHORT_NAME + " " + (self as int).to_hexa_string() + "]"
    }

    dyn __to_debug_string_dyn(set: Set<ptr>) -> string {
        let length = self.length;

        if length == 0 {
            return "[]";
        }

        let strings : string[] = [];
        let has_line_breaks = false;

        for item in self {
            let str = item.to_debug_string(set);

            if str.contains("\n") {
                has_line_breaks = true;
            }

            strings.push(str);
        }

        match has_line_breaks {
            true => "[\n" + strings.join(",\n").indent(2) + "\n]",
            false => "[ " + strings.join(", ") + " ]"
        }
    }
}

fn partition<T>(array: Pointer<T>, start_index: int, end_index: int, compare: fn(T, T)(int), secondary_keys: ptr) -> int {
    let pivot = array[end_index];
    let i = start_index - 1;

    for j in start_index..end_index {
        let compare_value = compare(array[j], pivot);

        if compare_value == 0 {
            compare_value = secondary_keys[j] - secondary_keys[end_index];
        }

        if compare_value < 0 {
            i += 1;
            array.swap(i, j);
            secondary_keys.swap(i, j);
        }
    }

    array.swap(i + 1, end_index);
    secondary_keys.swap(i + 1, end_index);

    i + 1
}

fn quick_sort<T>(array: Pointer<T>, start_index: int, end_index: int, compare: fn(T, T)(int), secondary_keys: ptr) {
    if start_index < end_index {
        let middle_index = partition(array, start_index, end_index, compare, secondary_keys);

        quick_sort(array, start_index, middle_index - 1, compare, secondary_keys);
        quick_sort(array, middle_index + 1, end_index, compare, secondary_keys);
    }
}