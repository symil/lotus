export interface Add {
    __add(other: Self) -> Self;
}

export interface Sub {
    __sub(other: Self) -> Self;
}

export interface Mul {
    __mul(other: Self) -> Self;
}

export interface Div {
    __div(other: Self) -> Self;
}

export interface Mod {
    __mod(other: Self) -> Self;
}

export interface Shl {
    __shl(other: int) -> Self;
}

export interface Shr {
    __shr(other: int) -> Self;
}

export interface And {
    __and(other: Self) -> Self;
}

export interface Or {
    __or(other: Self) -> Self;
}

export interface Xor {
    __xor(other: Self) -> Self;
}

export interface Ge {
    __ge(other: Self) -> bool;
}

export interface Gt {
    __gt(other: Self) -> bool;
}

export interface Le {
    __le(other: Self) -> bool;
}

export interface Lt {
    __lt(other: Self) -> bool;
}

export interface Plus {
    __plus() -> Self;
}

export interface Minus {
    __minus() -> Self;
}

export interface Not {
    __not() -> Self;
}

sys interface Range {
    __range(other: Self) -> Self[];
}

export interface GetAtIndex {
    type Item;

    __get_at_index(index: int) -> Item;
}

export interface SetAtIndex {
    type Item;

    __set_at_index(index: int, value: Item);
}

export interface Iterable {
    type Item;
    
    __get_iterable_len() -> int;
    __get_iterable_ptr() -> Pointer<Item>;
}

sys interface Unwrap {
    type Item;

    unwrap() -> Item;
}

export interface Number {
    to_int() -> int;
    to_float() -> float;
}

export interface Tuple {
    type First;
    type Second;

    first() -> First;
    second() -> Second;
}

sys interface Object {
    static __is(object: Object) -> bool;
}

sys interface Builtin {
    __eq(other: Self) -> bool;
    __ne(other: Self) -> bool;
    static __type_name() -> string;
    static __default() -> Self;
    static __none() -> Self;
    __is_none() -> bool;
    __hash() -> int;
    static __retain(value: Self);
    static __serialize(buffer: Buffer, value: Self);
    static __deserialize(buffer: Buffer) -> Self?;
    to_string() -> string;
    __to_debug_string(set: Set<ptr>) -> string;
}