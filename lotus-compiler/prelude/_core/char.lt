export type(i32) char {
    eq(other: This) -> bool {{
        i32.eq
    }}

    ne(other: This) -> bool {{
        i32.ne
    }}

    to_int() -> int {{

    }}

    static default() -> char {{
        (i32.const 0)
    }}

    static type_name() -> string {
        #TYPE_NAME
    }

    static __none() -> char {{
        (i32.const -2147483648)
    }}

    __is_none() -> bool {{
        (i32.const -2147483648)
        (i32.eq)
    }}

    __hash() -> int {
        (this as int).__hash()
    }

    to_string() -> string {
        if this.__is_none() {
            return "none";
        }

        let str = string::__create(1);

        str.__set_char(0, this);

        str
    }

    to_debug_string(set: Set<ptr>) -> string {
        if this.__is_none() {
            return "none";
        }

        let c = this;

        if c == '\n' {
            return "'\\n'";
        } else if c == '\t' {
            return "'\\t'";
        } else if c == '\0' {
            return "'\\0'";
        } else if c == '\'' {
            return "'\\''";
        }
        
        let str = string::__create(3);

        str.__set_char(0, '\'');
        str.__set_char(1, c);
        str.__set_char(2, '\'');

        str
    }

    __retain() {{

    }}

    __serialize(buffer: Buffer) {
        buffer.push(this.to_int());
    }

    static __deserialize(buffer: Buffer) -> char? {
        buffer.read().to_char()
    }
}