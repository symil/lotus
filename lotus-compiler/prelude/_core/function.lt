export type Function {
    static __default() -> Self {{
        (i32.const -2147483648)
    }}

    static __type_name() -> string {
        #TYPE_NAME
    }
    
    static __none() -> Self {{
        (i32.const -2147483648)
    }}

    __is_none() -> bool {{
        (i32.const -2147483648)
        (i32.eq)
    }}

    __hash() -> int {
        (self as int).__hash()
    }

    to_string() -> string {
        if self.__is_none() {
            "none"
        } else {
            "[Function " + (self as int).to_hexa_string() + "]"
        }
    }

    __to_debug_string(set: Set<ptr>) -> string {
        self.to_string()
    }

    __eq(other: Self) -> bool {{
        i32.eq
    }}

    __ne(other: Self) -> bool {{
        i32.ne
    }}

    static __retain(f: Self) {
        if ((f as int) & 0x80000000).eqz() {
            let p = f as ptr;

            if retain_memory(p) {
                Map<int, ptr>::__retain(p[0] as Map<int, ptr>);
                retain_closure_args(p[0], p[2]);
            }
        }
    }

    static __serialize(buffer: Buffer, value: Self) {{

    }}

    static __deserialize(buffer: Buffer) -> Self? {{
        drop
        (i32.const -2147483648)
    }}
}

fn retain_closure_args(closure_args: int, retain_function_index: int) {{
    (call_indirect (type $retain_closure_args_func_type))
}}