pub class SimpleBuffer {
    pointer: ptr,
    size: int,
    index: int

    static new(size: int) -> Self {
        let pointer = @alloc(size);
        let index = 0;

        Self { size, pointer, index }
    }

    reset_index() {
        self.index = 0;
    }

    read<T>() -> T {
        let result = (self.pointer as Pointer<T>)[self.index];

        self.index += 1;

        result
    }

    write<T>(value: T) {
        (self.pointer as Pointer<T>)[self.index] = value;
        self.index += 1;
    }

    readBuffer() -> int[] {
        let length : int = self.read();
        let pointer = @alloc(length);

        self.pointer.add(self.index).copy_to(pointer, length);
        self.index += length;

        Array<int>::from_raw_parts(pointer, length, length)
    }
}