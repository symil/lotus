const CLIENT : Client = none;

const VIRTUAL_WIDTH = 1600f;
const VIRTUAL_HEIGHT = 900f;

export class Client {
    _buffer: Buffer = Buffer::new(BIG_BUFFER_SIZE),
    _websocket_id: int,
    _layout: Layout,
    _draw_primitives: DrawPrimitive[],
    _network_events: NetworkEvent[],
    _window_events: WindowEvent[],

    user: #USER_TYPE?,
    local_data: #LOCAL_DATA_TYPE,
    hovered: View?,
    views: View[],
    real_width: float,
    real_height: float,
    virtual_width: float = VIRTUAL_WIDTH,
    virtual_height: float = VIRTUAL_HEIGHT,
    virtual_to_real_ratio: float,
    cursor_x: float,
    cursor_y: float,

    _start() {
        wasm_init_window(VIRTUAL_WIDTH / VIRTUAL_HEIGHT);
        self._websocket_id = wasm_create_websocket(`ws://localhost:${WEBSOCKET_PORT}`);
    }

    _update() {
        self._collect_network_events();
        self._collect_window_events();
        self._process_network_events();
        self._create_views();
        self._draw_frame();
        self._process_window_events();
    }

    _collect_network_events() {
        self._network_events.clear();
        self._buffer.clear();
        self._buffer.size = wasm_poll_network_events(self._buffer.data, self._buffer.capacity);

        while !self._buffer.is_finished() {
            self._network_events.push(decode_network_event_from_buffer(self._buffer));
        }
    }

    _collect_window_events() {
        self.real_width = wasm_get_window_width();
        self.real_height = wasm_get_window_height();
        self.virtual_to_real_ratio = self.real_width / self.virtual_width;

        self._window_events.clear();
        self._buffer.clear();
        self._buffer.size = wasm_poll_window_events(self._buffer.data, self._buffer.capacity);

        while !self._buffer.is_finished() {
            let window_event = decode_window_event_from_buffer(self._buffer, self);
            let push = true;

            if window_event is MouseEvent(mouse_event) {
                mouse_event.x /= self.virtual_to_real_ratio;
                mouse_event.y /= self.virtual_to_real_ratio;

                self.cursor_x = mouse_event.x;
                self.cursor_y = mouse_event.y;

                if mouse_event.action == MouseAction::Move {
                    push = false;
                }
            }

            if push {
                self._window_events.push(window_event);
            }
        }
    }

    _process_network_events() {
        let last_event = self._network_events.last();

        if last_event && last_event.kind == NetworkEventKind::Message {
            self.user = @deserialize(last_event.payload);
        }
    }

    _create_views() {
        let root_view = #WINDOW_TYPE {
            rect: Rect::from_size(self.virtual_width, self.virtual_height)
        };

        self.views.clear();
        self._render_view(root_view);
        self.hovered = self._detect_view_at(self.cursor_x, self.cursor_y);
        self._post_render();
    }

    _render_view(view: View) {
        let event = OnRender {
            client: self,
        };

        event.emit([view]);
        self.views.push(view);

        for child in view.children {
            self._render_view(child);
        }
    }

    _detect_view_at(x: float, y: float) -> View? {
        let current : View = none;

        for view in self.views {
            if view.graphics.detectable && view.rect.contains(x, y) {
                if !current || view.rect.z >= current.rect.z {
                    current = view;
                }
            }
        }

        current
    }

    _post_render() {
        let event = OnPostRender {
            client: self
        };
        let views = self.views.clone().reverse();

        event.emit(views);
    }

    _draw_frame() {
        self._draw_primitives.clear();

        let cursor = Cursor::Default;

        for view in self.views {
            if self.hovered == view {
                view.graphics.set(view.hover);
                cursor = view.graphics.cursor;
            }

            self._draw_primitives.push(view.graphics.__to_draw_primitive(view.rect, self.virtual_to_real_ratio));
        }

        self._buffer.clear();
        self._buffer.write_unchecked(cursor);

        for primitive in self._draw_primitives {
            primitive.write_to_buffer(self._buffer);
        }

        wasm_draw_frame(self._buffer.data, self._buffer.size);
    }

    _process_window_events() {
        let views = self.views.clone().reverse();

        for event in self._window_events {
            match event {
                MouseEvent(e) => {
                    let view = self._detect_view_at(e.x, e.y);

                    if view {
                        let callback_list = match e.action {
                            Down => view.on_down_callbacks,
                            Click => view.on_click_callbacks,
                            Up => view.on_up_callbacks,
                            Drag => view.on_drag_callbacks
                        };

                        for callback in callback_list {
                            callback();
                        }
                    }
                },
                KeyboardEvent(event) => {
                    event.emit(views);
                },
                WheelEvent(event) => {
                    event.emit(views);
                }
            }
        }
    }

    request<T>(value: T) {
        self._buffer.clear();
        T::__serialize(self._buffer, value);

        wasm_send_message(self._websocket_id, self._buffer.data, self._buffer.size);
    }
}

sys fn start_client() {
    CLIENT = Client;
    CLIENT._start();
}

sys fn update_client() {
    CLIENT._update();
    // @log(`memory used: ${get_memory_usage() / 1024} KB`);
    @retain(CLIENT);
    @trigger_garbage_collection();
}