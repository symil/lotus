export enum Shape { Rectangle, Circle, Line }
export enum Font { Arial }
export enum HorizontalAlign { Left, Center, Right }
export enum VerticalAlign { Top, Middle, Bottom }
export enum Cursor { Default, Pointer, Text }

export class Graphics {
    shape: Shape = Shape::Rectangle,
    border_radius: DisplaySize = none,
    border_width: DisplaySize = none,
    border_dash_length: DisplaySize = none,
    border_gap_length: DisplaySize = none,
    border_color: Color = none,
    border_alpha: float = 1,
    background_color: Color = none,
    background_alpha: float = 1,
    overlay_color: Color = none,
    overlay_alpha: float = 1,
    image_url: string = none,
    image_scale: float = 1,
    text: string = none,
    text_font: Font = Font::Arial,
    text_size: DisplaySize = none,
    text_color: Color = Color::black(),
    text_alpha: float = 1,
    text_margin: DisplaySize = none,
    text_max_width: DisplaySize = none,
    text_max_height: DisplaySize = none,
    text_background_color: Color = none,
    text_background_alpha: float = 1,
    text_border_color: Color = none,
    text_border_alpha: float = 1,
    text_horizontal_align: HorizontalAlign = HorizontalAlign::Center,
    text_vertical_align: VerticalAlign = VerticalAlign::Middle,
    text_bold: bool = false,
    text_italic: bool = false,
    text_cursor_index: int = none,
    detectable: bool = true,
    cursor: Cursor = Cursor::Default,

    static empty() -> Self {
        let graphics = Self::__create();

        iter_fields {
            graphics.#FIELD_NAME = none;
        }

        graphics
    }

    set(other: Self) {
        iter_fields {
            if other.#FIELD_NAME {
                self.#FIELD_NAME = other.#FIELD_NAME;
            }
        }
    }

    __to_draw_primitive(rect: Rect, virtual_to_real_ratio: float) -> DrawPrimitive {
        let real_rect = rect.multiply(virtual_to_real_ratio);
        let width = real_rect.width;
        let height = real_rect.height;

        // @dbg(self);

        DrawPrimitive {
            x: real_rect.x,
            y: real_rect.y,
            z: real_rect.z,
            width: width,
            height: height,
            angle: real_rect.angle,
            shape: self.shape,
            border_color: self.border_color.mult_alpha(self.border_alpha),
            border_width: self.border_width.resolve(width, height, virtual_to_real_ratio),
            border_radius: self.border_radius.resolve(width, height, virtual_to_real_ratio),
            border_dash_length: self.border_dash_length.resolve(width, height, virtual_to_real_ratio),
            border_gap_length: self.border_gap_length.resolve(width, height, virtual_to_real_ratio),
            background_color: self.background_color.mult_alpha(self.background_alpha),
            overlay_color: self.overlay_color.mult_alpha(self.overlay_alpha),
            image_url: self.image_url,
            image_width: width * self.image_scale,
            image_height: height * self.image_scale,
            text: self.text,
            text_font: self.text_font,
            text_size: self.text_size.resolve(width, height, virtual_to_real_ratio),
            text_color: self.text_color.mult_alpha(self.text_alpha),
            text_margin: self.text_margin.resolve(width, height, virtual_to_real_ratio),
            text_max_width: self.text_max_width.resolve(width, height, virtual_to_real_ratio),
            text_max_height: self.text_max_height.resolve(width, height, virtual_to_real_ratio),
            text_background_color: self.text_background_color.mult_alpha(self.text_background_alpha),
            text_border_color: self.text_border_color.mult_alpha(self.text_border_alpha),
            text_horizontal_align: self.text_horizontal_align,
            text_vertical_align: self.text_vertical_align,
            text_bold: self.text_bold,
            text_italic: self.text_italic,
            text_cursor_index: self.text_cursor_index,
        }
    }
}