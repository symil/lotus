type MouseHandlerCallback = fn();

export class View {
    client: Client?,
    focused: bool,
    rect: Rect,
    graphics: Graphics,
    hover: Graphics = Graphics::empty(),
    children: View[],
    on_click_callbacks: MouseHandlerCallback[],
    on_down_callbacks: MouseHandlerCallback[],
    on_up_callbacks: MouseHandlerCallback[],
    on_drag_callbacks: MouseHandlerCallback[],

    layout() -> Layout {
        Layout::new(self)
    }

    on_click(callback: MouseHandlerCallback) -> Self {
        self.on_click_callbacks.push(callback);
        self
    }
    
    on_down(callback: MouseHandlerCallback) -> Self {
        self.on_down_callbacks.push(callback);
        self
    }

    on_up(callback: MouseHandlerCallback) -> Self {
        self.on_up_callbacks.push(callback);
        self
    }

    on_drag(callback: MouseHandlerCallback) -> Self {
        self.on_drag_callbacks.push(callback);
        self
    }

    scale(ratio: float) -> Self {
        self.rect = self.rect.scale(ratio);
        self
    }

    strip_to_match_aspect_ratio(aspect_ratio: float) -> Self {
        self.rect = self.rect.strip_to_match_aspect_ratio(aspect_ratio);
        self
    }

    shape(shape: Shape) -> Self {
        self.graphics.shape = shape;
        self
    }

    border_radius(border_radius: DisplaySize) -> Self {
        self.graphics.border_radius = border_radius;
        self
    }

    border_width(border_width: DisplaySize) -> Self {
        self.graphics.border_width = border_width;
        self
    }

    border_dash_length(border_dash_length: DisplaySize) -> Self {
        self.graphics.border_dash_length = border_dash_length;
        self
    }

    border_gap_length(border_gap_length: DisplaySize) -> Self {
        self.graphics.border_gap_length = border_gap_length;
        self
    }

    border_color(border_color: Color) -> Self {
        self.graphics.border_color = border_color;
        self
    }

    border_alpha(border_alpha: float) -> Self {
        self.graphics.border_alpha = border_alpha;
        self
    }

    background_color(background_color: Color) -> Self {
        self.graphics.background_color = background_color;
        self
    }

    background_alpha(background_alpha: float) -> Self {
        self.graphics.background_alpha = background_alpha;
        self
    }

    overlay_color(overlay_color: Color) -> Self {
        self.graphics.overlay_color = overlay_color;
        self
    }

    overlay_alpha(overlay_alpha: float) -> Self {
        self.graphics.overlay_alpha = overlay_alpha;
        self
    }

    image_url(image_url: string) -> Self {
        self.graphics.image_url = image_url;
        self
    }

    image_scale(image_scale: float) -> Self {
        self.graphics.image_scale = image_scale;
        self
    }

    text(text: string) -> Self {
        self.graphics.text = text;
        self
    }

    text_font(text_font: Font) -> Self {
        self.graphics.text_font = text_font;
        self
    }

    text_size(text_size: DisplaySize) -> Self {
        self.graphics.text_size = text_size;
        self
    }

    text_color(text_color: Color) -> Self {
        self.graphics.text_color = text_color;
        self
    }

    text_alpha(text_alpha: float) -> Self {
        self.graphics.text_alpha = text_alpha;
        self
    }

    text_margin(text_margin: DisplaySize) -> Self {
        self.graphics.text_margin = text_margin;
        self
    }

    text_max_width(text_max_width: DisplaySize) -> Self {
        self.graphics.text_max_width = text_max_width;
        self
    }

    text_max_height(text_max_height: DisplaySize) -> Self {
        self.graphics.text_max_height = text_max_height;
        self
    }

    text_background_color(text_background_color: Color) -> Self {
        self.graphics.text_background_color = text_background_color;
        self
    }

    text_background_alpha(text_background_alpha: float) -> Self {
        self.graphics.text_background_alpha = text_background_alpha;
        self
    }

    text_border_color(text_border_color: Color) -> Self {
        self.graphics.text_border_color = text_border_color;
        self
    }

    text_border_alpha(text_border_alpha: float) -> Self {
        self.graphics.text_border_alpha = text_border_alpha;
        self
    }

    text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self {
        self.graphics.text_horizontal_align = text_horizontal_align;
        self
    }

    text_vertical_align(text_vertical_align: VerticalAlign) -> Self {
        self.graphics.text_vertical_align = text_vertical_align;
        self
    }

    text_bold(text_bold: bool) -> Self {
        self.graphics.text_bold = text_bold;
        self
    }

    text_italic(text_italic: bool) -> Self {
        self.graphics.text_italic = text_italic;
        self
    }

    text_cursor_index(text_cursor_index: int) -> Self {
        self.graphics.text_cursor_index = text_cursor_index;
        self
    }

    detectable(detectable: bool) -> Self {
        self.graphics.detectable = detectable;
        self
    }

    cursor(cursor: Cursor) -> Self {
        self.graphics.cursor = cursor;
        self
    }

    hover_shape(shape: Shape) -> Self {
        self.hover.shape = shape;
        self
    }

    hover_border_radius(border_radius: DisplaySize) -> Self {
        self.hover.border_radius = border_radius;
        self
    }

    hover_border_width(border_width: DisplaySize) -> Self {
        self.hover.border_width = border_width;
        self
    }

    hover_border_dash_length(border_dash_length: DisplaySize) -> Self {
        self.hover.border_dash_length = border_dash_length;
        self
    }

    hover_border_gap_length(border_gap_length: DisplaySize) -> Self {
        self.hover.border_gap_length = border_gap_length;
        self
    }

    hover_border_color(border_color: Color) -> Self {
        self.hover.border_color = border_color;
        self
    }

    hover_border_alpha(border_alpha: float) -> Self {
        self.hover.border_alpha = border_alpha;
        self
    }

    hover_background_color(background_color: Color) -> Self {
        self.hover.background_color = background_color;
        self
    }

    hover_background_alpha(background_alpha: float) -> Self {
        self.hover.background_alpha = background_alpha;
        self
    }

    hover_overlay_color(overlay_color: Color) -> Self {
        self.hover.overlay_color = overlay_color;
        self
    }

    hover_overlay_alpha(overlay_alpha: float) -> Self {
        self.hover.overlay_alpha = overlay_alpha;
        self
    }

    hover_image_url(image_url: string) -> Self {
        self.hover.image_url = image_url;
        self
    }

    hover_image_scale(image_scale: float) -> Self {
        self.hover.image_scale = image_scale;
        self
    }

    hover_text(text: string) -> Self {
        self.hover.text = text;
        self
    }

    hover_text_font(text_font: Font) -> Self {
        self.hover.text_font = text_font;
        self
    }

    hover_text_size(text_size: DisplaySize) -> Self {
        self.hover.text_size = text_size;
        self
    }

    hover_text_color(text_color: Color) -> Self {
        self.hover.text_color = text_color;
        self
    }

    hover_text_alpha(text_alpha: float) -> Self {
        self.hover.text_alpha = text_alpha;
        self
    }

    hover_text_margin(text_margin: DisplaySize) -> Self {
        self.hover.text_margin = text_margin;
        self
    }

    hover_text_max_width(text_max_width: DisplaySize) -> Self {
        self.hover.text_max_width = text_max_width;
        self
    }

    hover_text_max_height(text_max_height: DisplaySize) -> Self {
        self.hover.text_max_height = text_max_height;
        self
    }

    hover_text_background_color(text_background_color: Color) -> Self {
        self.hover.text_background_color = text_background_color;
        self
    }

    hover_text_background_alpha(text_background_alpha: float) -> Self {
        self.hover.text_background_alpha = text_background_alpha;
        self
    }

    hover_text_border_color(text_border_color: Color) -> Self {
        self.hover.text_border_color = text_border_color;
        self
    }

    hover_text_border_alpha(text_border_alpha: float) -> Self {
        self.hover.text_border_alpha = text_border_alpha;
        self
    }

    hover_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self {
        self.hover.text_horizontal_align = text_horizontal_align;
        self
    }

    hover_text_vertical_align(text_vertical_align: VerticalAlign) -> Self {
        self.hover.text_vertical_align = text_vertical_align;
        self
    }

    hover_text_bold(text_bold: bool) -> Self {
        self.hover.text_bold = text_bold;
        self
    }

    hover_text_italic(text_italic: bool) -> Self {
        self.hover.text_italic = text_italic;
        self
    }

    hover_text_cursor_index(text_cursor_index: int) -> Self {
        self.hover.text_cursor_index = text_cursor_index;
        self
    }

    hover_detectable(detectable: bool) -> Self {
        self.hover.detectable = detectable;
        self
    }

    hover_cursor(cursor: Cursor) -> Self {
        self.hover.cursor = cursor;
        self
    }
}