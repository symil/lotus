pub type MouseHandlerCallback = fn(Client);

export class View {
    _client: Client = Client::get(),
    _parent: View = none,
    _disabled: bool = false,
    _rect: Rect = none,
    _graphics: Graphics = Graphics,
    _hovered_graphics: Graphics? = none,
    _focused_graphics: Graphics? = none,
    _disabled_graphics: Graphics? = none,
    _children: View[] = [],
    _on_click_callbacks: MouseHandlerCallback[] = [],
    _on_down_callbacks: MouseHandlerCallback[] = [],
    _on_up_callbacks: MouseHandlerCallback[] = [],
    _on_drag_callbacks: MouseHandlerCallback[] = [],

    client() -> Client? {
        self._client
    }

    rect() -> Rect {
        self._rect
    }

    children() -> View[] {
        self._children
    }

    get_descendants<T>(callback: fn(View)(T)) -> T[] {
        let accumulator = CollectAccumulator<T> {
            result: [],
            callback
        };

        self._traverse(accumulator, (acc, view) => {
            let mapped = (accumulator.callback)(view);

            if mapped {
                acc.result.push(mapped);
            }
        });

        accumulator.result
    }

    _traverse<T>(acc: T, callback: fn(T, View)) {
        callback(acc, self);

        for child in self._children {
            child._traverse(acc, callback);
        }
    }

    add_child(view: View) {
        view._parent = self;
        self._children.push(view);
    }

    is_ancestor_of(view: View) -> bool {
        if !view {
            return false;
        }

        match view == self {
            true => true,
            false => self.is_ancestor_of(view._parent),
        }
    }

    is_descendant_of(view: View) -> bool {
        if !view {
            return false;
        }

        view.is_ancestor_of(self)
    }

    layout() -> Layout {
        Layout::new(self)
    }

    is_hovered() -> bool {
        !self.is_disabled() && self._client.get_hovered_view() == self
    }

    is_focused() -> bool {
        !self.is_disabled() && self._client.get_focused_view() == self
    }

    focus() -> Self {
        self._client.focus(self);
        self
    }

    unfocus() -> Self {
        if self.is_focused() {
            self._client.focus(none);
        }
        self
    }

    is_disabled() -> bool {
        self._disabled
    }

    disable() {
        self._disabled = true;
    }

    enable() {
        self._disabled = false;
    }

    add_to_focus_chain() -> Self {
        self._client.add_to_focus_chain(self)
        self
    }

    on_click(callback: MouseHandlerCallback) -> Self { push_callback(self, self._on_click_callbacks, callback) }
    on_down(callback: MouseHandlerCallback) -> Self { push_callback(self, self._on_down_callbacks, callback) }
    on_up(callback: MouseHandlerCallback) -> Self { push_callback(self, self._on_up_callbacks, callback) }
    on_drag(callback: MouseHandlerCallback) -> Self { push_callback(self, self._on_drag_callbacks, callback) }
    clear_mouse_handlers() -> Self {
        self._on_click_callbacks.clear();
        self._on_down_callbacks.clear();
        self._on_up_callbacks.clear();
        self._on_drag_callbacks.clear();
        self
    }

    scale(ratio: float) -> Self {
        self._rect = self._rect.scale(ratio);
        self
    }

    strip_to_match_aspect_ratio(aspect_ratio: float) -> Self {
        self._rect = self._rect.strip_to_match_aspect_ratio(aspect_ratio);
        self
    }


    shape(shape: Shape) -> Self { self._graphics.set_shape(self, shape) }
    border_radius(border_radius: DisplaySize) -> Self { self._graphics.set_border_radius(self, border_radius) }
    border_width(border_width: DisplaySize) -> Self { self._graphics.set_border_width(self, border_width) }
    border_dash_length(border_dash_length: DisplaySize) -> Self { self._graphics.set_border_dash_length(self, border_dash_length) }
    border_gap_length(border_gap_length: DisplaySize) -> Self { self._graphics.set_border_gap_length(self, border_gap_length) }
    border_color(border_color: Color) -> Self { self._graphics.set_border_color(self, border_color) }
    border_alpha(border_alpha: float) -> Self { self._graphics.set_border_alpha(self, border_alpha) }
    background_color(background_color: Color) -> Self { self._graphics.set_background_color(self, background_color) }
    background_alpha(background_alpha: float) -> Self { self._graphics.set_background_alpha(self, background_alpha) }
    overlay_color(overlay_color: Color) -> Self { self._graphics.set_overlay_color(self, overlay_color) }
    overlay_alpha(overlay_alpha: float) -> Self { self._graphics.set_overlay_alpha(self, overlay_alpha) }
    image_url(image_url: string) -> Self { self._graphics.set_image_url(self, image_url) }
    image_scale(image_scale: float) -> Self { self._graphics.set_image_scale(self, image_scale) }
    text(text: string) -> Self { self._graphics.set_text(self, text) }
    text_font(text_font: Font) -> Self { self._graphics.set_text_font(self, text_font) }
    text_size(text_size: DisplaySize) -> Self { self._graphics.set_text_size(self, text_size) }
    text_color(text_color: Color) -> Self { self._graphics.set_text_color(self, text_color) }
    text_alpha(text_alpha: float) -> Self { self._graphics.set_text_alpha(self, text_alpha) }
    text_margin(text_margin: DisplaySize) -> Self { self._graphics.set_text_margin(self, text_margin) }
    text_max_width(text_max_width: DisplaySize) -> Self { self._graphics.set_text_max_width(self, text_max_width) }
    text_max_height(text_max_height: DisplaySize) -> Self { self._graphics.set_text_max_height(self, text_max_height) }
    text_background_color(text_background_color: Color) -> Self { self._graphics.set_text_background_color(self, text_background_color) }
    text_background_alpha(text_background_alpha: float) -> Self { self._graphics.set_text_background_alpha(self, text_background_alpha) }
    text_border_color(text_border_color: Color) -> Self { self._graphics.set_text_border_color(self, text_border_color) }
    text_border_alpha(text_border_alpha: float) -> Self { self._graphics.set_text_border_alpha(self, text_border_alpha) }
    text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._graphics.set_text_horizontal_align(self, text_horizontal_align) }
    text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._graphics.set_text_vertical_align(self, text_vertical_align) }
    text_bold(text_bold: bool) -> Self { self._graphics.set_text_bold(self, text_bold) }
    text_italic(text_italic: bool) -> Self { self._graphics.set_text_italic(self, text_italic) }
    text_cursor_index(text_cursor_index: int) -> Self { self._graphics.set_text_cursor_index(self, text_cursor_index) }
    detectable(detectable: bool) -> Self { self._graphics.set_detectable(self, detectable) }
    cursor(cursor: Cursor) -> Self { self._graphics.set_cursor(self, cursor) }

    _hovered_graphics() -> Graphics {
        if !self._hovered_graphics {
            self._hovered_graphics = Graphics::empty();
        }
        self._hovered_graphics
    }

    _focused_graphics() -> Graphics {
        if !self._focused_graphics {
            self._focused_graphics = Graphics::empty();
        }
        self._focused_graphics
    }

    _disabled_graphics() -> Graphics {
        if !self._disabled_graphics {
            self._disabled_graphics = Graphics::empty();
        }
        self._disabled_graphics
    }

    hover_shape(shape: Shape) -> Self { self._hovered_graphics().set_shape(self, shape) }
    hover_border_radius(border_radius: DisplaySize) -> Self { self._hovered_graphics().set_border_radius(self, border_radius) }
    hover_border_width(border_width: DisplaySize) -> Self { self._hovered_graphics().set_border_width(self, border_width) }
    hover_border_dash_length(border_dash_length: DisplaySize) -> Self { self._hovered_graphics().set_border_dash_length(self, border_dash_length) }
    hover_border_gap_length(border_gap_length: DisplaySize) -> Self { self._hovered_graphics().set_border_gap_length(self, border_gap_length) }
    hover_border_color(border_color: Color) -> Self { self._hovered_graphics().set_border_color(self, border_color) }
    hover_border_alpha(border_alpha: float) -> Self { self._hovered_graphics().set_border_alpha(self, border_alpha) }
    hover_background_color(background_color: Color) -> Self { self._hovered_graphics().set_background_color(self, background_color) }
    hover_background_alpha(background_alpha: float) -> Self { self._hovered_graphics().set_background_alpha(self, background_alpha) }
    hover_overlay_color(overlay_color: Color) -> Self { self._hovered_graphics().set_overlay_color(self, overlay_color) }
    hover_overlay_alpha(overlay_alpha: float) -> Self { self._hovered_graphics().set_overlay_alpha(self, overlay_alpha) }
    hover_image_url(image_url: string) -> Self { self._hovered_graphics().set_image_url(self, image_url) }
    hover_image_scale(image_scale: float) -> Self { self._hovered_graphics().set_image_scale(self, image_scale) }
    hover_text(text: string) -> Self { self._hovered_graphics().set_text(self, text) }
    hover_text_font(text_font: Font) -> Self { self._hovered_graphics().set_text_font(self, text_font) }
    hover_text_size(text_size: DisplaySize) -> Self { self._hovered_graphics().set_text_size(self, text_size) }
    hover_text_color(text_color: Color) -> Self { self._hovered_graphics().set_text_color(self, text_color) }
    hover_text_alpha(text_alpha: float) -> Self { self._hovered_graphics().set_text_alpha(self, text_alpha) }
    hover_text_margin(text_margin: DisplaySize) -> Self { self._hovered_graphics().set_text_margin(self, text_margin) }
    hover_text_max_width(text_max_width: DisplaySize) -> Self { self._hovered_graphics().set_text_max_width(self, text_max_width) }
    hover_text_max_height(text_max_height: DisplaySize) -> Self { self._hovered_graphics().set_text_max_height(self, text_max_height) }
    hover_text_background_color(text_background_color: Color) -> Self { self._hovered_graphics().set_text_background_color(self, text_background_color) }
    hover_text_background_alpha(text_background_alpha: float) -> Self { self._hovered_graphics().set_text_background_alpha(self, text_background_alpha) }
    hover_text_border_color(text_border_color: Color) -> Self { self._hovered_graphics().set_text_border_color(self, text_border_color) }
    hover_text_border_alpha(text_border_alpha: float) -> Self { self._hovered_graphics().set_text_border_alpha(self, text_border_alpha) }
    hover_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._hovered_graphics().set_text_horizontal_align(self, text_horizontal_align) }
    hover_text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._hovered_graphics().set_text_vertical_align(self, text_vertical_align) }
    hover_text_bold(text_bold: bool) -> Self { self._hovered_graphics().set_text_bold(self, text_bold) }
    hover_text_italic(text_italic: bool) -> Self { self._hovered_graphics().set_text_italic(self, text_italic) }
    hover_text_cursor_index(text_cursor_index: int) -> Self { self._hovered_graphics().set_text_cursor_index(self, text_cursor_index) }
    hover_detectable(detectable: bool) -> Self { self._hovered_graphics().set_detectable(self, detectable) }
    hover_cursor(cursor: Cursor) -> Self { self._hovered_graphics().set_cursor(self, cursor) }

    focus_shape(shape: Shape) -> Self { self._focused_graphics().set_shape(self, shape) }
    focus_border_radius(border_radius: DisplaySize) -> Self { self._focused_graphics().set_border_radius(self, border_radius) }
    focus_border_width(border_width: DisplaySize) -> Self { self._focused_graphics().set_border_width(self, border_width) }
    focus_border_dash_length(border_dash_length: DisplaySize) -> Self { self._focused_graphics().set_border_dash_length(self, border_dash_length) }
    focus_border_gap_length(border_gap_length: DisplaySize) -> Self { self._focused_graphics().set_border_gap_length(self, border_gap_length) }
    focus_border_color(border_color: Color) -> Self { self._focused_graphics().set_border_color(self, border_color) }
    focus_border_alpha(border_alpha: float) -> Self { self._focused_graphics().set_border_alpha(self, border_alpha) }
    focus_background_color(background_color: Color) -> Self { self._focused_graphics().set_background_color(self, background_color) }
    focus_background_alpha(background_alpha: float) -> Self { self._focused_graphics().set_background_alpha(self, background_alpha) }
    focus_overlay_color(overlay_color: Color) -> Self { self._focused_graphics().set_overlay_color(self, overlay_color) }
    focus_overlay_alpha(overlay_alpha: float) -> Self { self._focused_graphics().set_overlay_alpha(self, overlay_alpha) }
    focus_image_url(image_url: string) -> Self { self._focused_graphics().set_image_url(self, image_url) }
    focus_image_scale(image_scale: float) -> Self { self._focused_graphics().set_image_scale(self, image_scale) }
    focus_text(text: string) -> Self { self._focused_graphics().set_text(self, text) }
    focus_text_font(text_font: Font) -> Self { self._focused_graphics().set_text_font(self, text_font) }
    focus_text_size(text_size: DisplaySize) -> Self { self._focused_graphics().set_text_size(self, text_size) }
    focus_text_color(text_color: Color) -> Self { self._focused_graphics().set_text_color(self, text_color) }
    focus_text_alpha(text_alpha: float) -> Self { self._focused_graphics().set_text_alpha(self, text_alpha) }
    focus_text_margin(text_margin: DisplaySize) -> Self { self._focused_graphics().set_text_margin(self, text_margin) }
    focus_text_max_width(text_max_width: DisplaySize) -> Self { self._focused_graphics().set_text_max_width(self, text_max_width) }
    focus_text_max_height(text_max_height: DisplaySize) -> Self { self._focused_graphics().set_text_max_height(self, text_max_height) }
    focus_text_background_color(text_background_color: Color) -> Self { self._focused_graphics().set_text_background_color(self, text_background_color) }
    focus_text_background_alpha(text_background_alpha: float) -> Self { self._focused_graphics().set_text_background_alpha(self, text_background_alpha) }
    focus_text_border_color(text_border_color: Color) -> Self { self._focused_graphics().set_text_border_color(self, text_border_color) }
    focus_text_border_alpha(text_border_alpha: float) -> Self { self._focused_graphics().set_text_border_alpha(self, text_border_alpha) }
    focus_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._focused_graphics().set_text_horizontal_align(self, text_horizontal_align) }
    focus_text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._focused_graphics().set_text_vertical_align(self, text_vertical_align) }
    focus_text_bold(text_bold: bool) -> Self { self._focused_graphics().set_text_bold(self, text_bold) }
    focus_text_italic(text_italic: bool) -> Self { self._focused_graphics().set_text_italic(self, text_italic) }
    focus_text_cursor_index(text_cursor_index: int) -> Self { self._focused_graphics().set_text_cursor_index(self, text_cursor_index) }
    focus_detectable(detectable: bool) -> Self { self._focused_graphics().set_detectable(self, detectable) }
    focus_cursor(cursor: Cursor) -> Self { self._focused_graphics().set_cursor(self, cursor) }

    disabled_shape(shape: Shape) -> Self { self._disabled_graphics().set_shape(self, shape) }
    disabled_border_radius(border_radius: DisplaySize) -> Self { self._disabled_graphics().set_border_radius(self, border_radius) }
    disabled_border_width(border_width: DisplaySize) -> Self { self._disabled_graphics().set_border_width(self, border_width) }
    disabled_border_dash_length(border_dash_length: DisplaySize) -> Self { self._disabled_graphics().set_border_dash_length(self, border_dash_length) }
    disabled_border_gap_length(border_gap_length: DisplaySize) -> Self { self._disabled_graphics().set_border_gap_length(self, border_gap_length) }
    disabled_border_color(border_color: Color) -> Self { self._disabled_graphics().set_border_color(self, border_color) }
    disabled_border_alpha(border_alpha: float) -> Self { self._disabled_graphics().set_border_alpha(self, border_alpha) }
    disabled_background_color(background_color: Color) -> Self { self._disabled_graphics().set_background_color(self, background_color) }
    disabled_background_alpha(background_alpha: float) -> Self { self._disabled_graphics().set_background_alpha(self, background_alpha) }
    disabled_overlay_color(overlay_color: Color) -> Self { self._disabled_graphics().set_overlay_color(self, overlay_color) }
    disabled_overlay_alpha(overlay_alpha: float) -> Self { self._disabled_graphics().set_overlay_alpha(self, overlay_alpha) }
    disabled_image_url(image_url: string) -> Self { self._disabled_graphics().set_image_url(self, image_url) }
    disabled_image_scale(image_scale: float) -> Self { self._disabled_graphics().set_image_scale(self, image_scale) }
    disabled_text(text: string) -> Self { self._disabled_graphics().set_text(self, text) }
    disabled_text_font(text_font: Font) -> Self { self._disabled_graphics().set_text_font(self, text_font) }
    disabled_text_size(text_size: DisplaySize) -> Self { self._disabled_graphics().set_text_size(self, text_size) }
    disabled_text_color(text_color: Color) -> Self { self._disabled_graphics().set_text_color(self, text_color) }
    disabled_text_alpha(text_alpha: float) -> Self { self._disabled_graphics().set_text_alpha(self, text_alpha) }
    disabled_text_margin(text_margin: DisplaySize) -> Self { self._disabled_graphics().set_text_margin(self, text_margin) }
    disabled_text_max_width(text_max_width: DisplaySize) -> Self { self._disabled_graphics().set_text_max_width(self, text_max_width) }
    disabled_text_max_height(text_max_height: DisplaySize) -> Self { self._disabled_graphics().set_text_max_height(self, text_max_height) }
    disabled_text_background_color(text_background_color: Color) -> Self { self._disabled_graphics().set_text_background_color(self, text_background_color) }
    disabled_text_background_alpha(text_background_alpha: float) -> Self { self._disabled_graphics().set_text_background_alpha(self, text_background_alpha) }
    disabled_text_border_color(text_border_color: Color) -> Self { self._disabled_graphics().set_text_border_color(self, text_border_color) }
    disabled_text_border_alpha(text_border_alpha: float) -> Self { self._disabled_graphics().set_text_border_alpha(self, text_border_alpha) }
    disabled_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._disabled_graphics().set_text_horizontal_align(self, text_horizontal_align) }
    disabled_text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._disabled_graphics().set_text_vertical_align(self, text_vertical_align) }
    disabled_text_bold(text_bold: bool) -> Self { self._disabled_graphics().set_text_bold(self, text_bold) }
    disabled_text_italic(text_italic: bool) -> Self { self._disabled_graphics().set_text_italic(self, text_italic) }
    disabled_text_cursor_index(text_cursor_index: int) -> Self { self._disabled_graphics().set_text_cursor_index(self, text_cursor_index) }
    disabled_detectable(detectable: bool) -> Self { self._disabled_graphics().set_detectable(self, detectable) }
    disabled_cursor(cursor: Cursor) -> Self { self._disabled_graphics().set_cursor(self, cursor) }
}

fn push_callback<S, T>(owner: S, array: T[], value: T?) -> S {
    if value {
        array.push(value);
    }

    owner
}

class CollectAccumulator<T> {
    result: T[],
    callback: fn(View)(T)
}