export class DataStore {
    _map: Map<string, Object>,

    static new() -> Self {
        Self {}
    }

    get<T : Object>(key: string) -> T? {
        let value = self._map.get(key);

        if value is T(casted) {
            casted
        } else {
            none
        }
    }

    get_or_insert_with<T : Object>(key: string, insert_function: fn()(T)) -> T {
        let result : T = self.get(key);

        if !result {
            result = insert_function();
            self._map.set(key, result as Object);
        }

        result
    }

    get_or_insert_default<T : Object>(key: string) -> T {
        self.get_or_insert_with(key, () => T::__default())
    }

    set(key: string, value: Object) {
        self._map.set(key, value);
    }
}