struct Foo {
    b: Foo,
    c: string,
    d: Bar[],

    display_addr() -> Foo {
        @log(#_ as ptr);
        @log(#b as ptr);
        @log(#c as ptr);
        @log(#d as ptr);
        @log((#d as ptr)[0] as ptr);

        for value in #d {
            value.display_addr();
        }

        return #_;
    }
}

struct Bar {
    name: string,
    parent: Foo,

    display_addr() {
        @log(#_ as ptr);
        @log(#name as ptr);
        @log(#parent as ptr);
    }
}

export fn main() {
    make_foo().display_addr();
    @garbage_collect();
    @log();

    let foo = make_foo().display_addr();
    @retain(foo);
    @garbage_collect();

    @log();

    make_foo().display_addr();
}

fn make_foo() -> Foo {
    let foo = Foo {
        c: "foo"
    };

    foo.b = foo;

    for i in 0..3 {
        foo.d.push(Bar {
            name: "bar",
            parent: foo
        });
    }

    return foo;
}