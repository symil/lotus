export type(i32) any {
    autogen static __type_name() -> string { #TYPE_NAME }
    autogen static __type_id() -> int { #TYPE_ID }
    autogen static __type_full_name() -> string { #TYPE_FULL_NAME }

    autogen static __default() -> Self {{ (i32.const 0) }}
    autogen static __none() -> Self {{ (i32.const 0) }}
    autogen __is_none() -> bool { true }
    autogen __hash() -> int { 0 }

    autogen to_string() -> string { #TYPE_NAME }
    autogen __to_debug_string(set: Set<ptr>) -> string { #TYPE_NAME }
    autogen __eq(other: Self) -> bool { true }
    autogen __ne(other: Self) -> bool { false }
    autogen static __retain(value: Self) { }
    autogen static __serialize(buffer: Buffer, value: Self) { }
    autogen static __deserialize(buffer: Buffer) -> Self? { Self::__none() }
    autogen static __serialize_with_schema(buffer: Buffer, value: Self) { }
    autogen static __deserialize_with_schema(buffer: Buffer) -> Self? { Self::__none() }

    autogen and<T>(other: T) -> T {
        self && other
    }

    autogen and_then<T>(callback: fn(Self)(T)) -> T {
        self && callback(self)
    }

    autogen or(other: Self) -> Self {
        self || other
    }

    autogen or_else(callback: fn()(Self)) -> Self {
        self || callback()
    }
}