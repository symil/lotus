export class Set<V> {
    _map: Map<V, int>,

    static __default() -> Self {
        Self::new()
    }

    static new() -> Self {
        Self {
            _map: Map<V, int>::new()
        }
    }

    capacity() -> int {
        self._map.capacity()
    }

    size() -> int {
        self._map.size()
    }

    values() -> V[] {
        self._map.keys()
    }

    // Returns `true` if the item is added to the set, `false` if it was already in the set
    add(value: V) -> bool {
        !self._map.set(value, 0)
    }

    delete(value: V) -> bool {
        !!self._map.delete(value)
    }

    clear() {
        self._map.clear()
    }

    has(value: V) -> bool {
        !!self._map.get(value)
    }
}