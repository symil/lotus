const START_CAPACITY = 32;

let _last_entry_index : int = none;
let _entry_hash_index : int = none;

export class Map<K, V> {
    type Item = MapEntry<K, V>;

    capacity: int,
    size: int,
    hash_table: int?[],
    data_table: MapEntry<K, V>[],

    static __default() -> Self {
        Self::new()
    }

    static new() -> Self {
        Self::with_capacity(START_CAPACITY)
    }

    static with_capacity(capacity: int) -> Self {
        let bucket_count = capacity.next_power_of_2() / 2;
        let map = Self {
            capacity: bucket_count * 2,
            size: 0,
            hash_table: int[]::with_capacity(bucket_count),
            data_table: []
        };

        for i in 0..bucket_count {
            map.hash_table.push(none);
        }

        map
    }

    clone() -> Self {
        Self {
            capacity: self.capacity,
            size: self.size,
            hash_table: self.hash_table.clone(),
            data_table: self.data_table.map(entry => entry.clone()),
        }
    }

    _rehash() {
        let new_map = Self::with_capacity(self.capacity * 2);

        for entry in self.data_table {
            if entry.key {
                new_map.set(entry.key, entry.value);
            }
        }

        self._set(new_map);
    }

    _set(other: Self) {
        self.capacity = other.capacity;
        self.size = other.size;
        self.hash_table = other.hash_table;
        self.data_table = other.data_table;
    }

    _get_entry(key: K) -> MapEntry<K, V>? {
        let key_hash = key.__hash();
        let hash_index = key_hash % self.hash_table.len();
        let entry_index = self.hash_table[hash_index];
        let entry : MapEntry<K, V> = none;

        _entry_hash_index = hash_index;
        _last_entry_index = none;

        while entry_index {
            _last_entry_index = entry_index;
            entry = self.data_table[entry_index];
            entry_index = entry.next_entry_index;

            if entry.key == key {
                return entry;
            }
        }

        none
    }

    __get_iterable_len() -> int {
        self.data_table.len()
    }

    __get_iterable_ptr() -> Pointer<MapEntry<K, V>> {
        self.data_table.body()
    }

    capacity() -> int {
        self.capacity
    }

    keys() -> K[] {
        let array = Array<K>::with_capacity(self.size);

        for entry in self.data_table {
            if entry.key {
                array.push_unchecked(entry.key);
            }
        }

        array
    }

    values() -> V[] {
        let array = Array<V>::with_capacity(self.size);

        for entry in self.data_table {
            if entry.key {
                array.push_unchecked(entry.value);
            }
        }

        array
    }

    entries() -> (K, V)[] {
        let array = Array<(K, V)>::with_capacity(self.size);

        for entry in self.data_table {
            if entry.key {
                array.push_unchecked((entry.key, entry.value));
            }
        }

        array
    }

    size() -> int {
        self.size
    }

    is_empty() -> bool {
        self.size == 0
    }

    clear() {
        for i in 0..self.hash_table.len() {
            self.hash_table[i] = none;
        }

        self.data_table.clear();
        self.size = 0;
    }

    get(key: K) -> V? {
        let entry = self._get_entry(key);

        match !!entry {
            true => entry.value,
            false => none
        }
    }

    get_or_insert_with(key: K, f: fn()(V)) -> V {
        let value = self.get(key);

        if !value {
            value = f();
            
            self.set(key, value);
        }

        value
    }

    set(key: K, value: V) -> V? {
        let entry = self._get_entry(key);
        let previous_value : V = none;

        if entry {
            previous_value = entry.value;
            entry.key = key;
            entry.value = value;
        } else {
            entry = MapEntry<K, V> {
                key: key,
                value: value,
                next_entry_index: none
            };

            self.data_table.push(entry);
            self.size += 1;

            let entry_index = self.data_table.len() - 1;

            if _last_entry_index {
                self.data_table[_last_entry_index].next_entry_index = entry_index;
            } else {
                self.hash_table[_entry_hash_index] = entry_index;
            }

            if self.data_table.len() > self.hash_table.len() * 2 {
                self._rehash();
            }
        }

        previous_value
    }

    delete(key: K) -> V? {
        let entry = self._get_entry(key);

        if entry && entry.key {
            let ret = entry.value;

            entry.key = none;
            entry.value = none;
            self.size -= 1;

            return ret;
        }

        none
    }

    sort(compare: fn(K, K)(int)) -> Self {
        let new_map = Self::with_capacity(self.capacity);
        let entries = self.entries();

        entries.sort_in_place((e1, e2) => compare(e1.first, e2.first));

        for entry in entries {
            new_map.set(entry.first, entry.second);
        }

        self._set(new_map);
        
        self
    }

    dyn __serialize_dyn(buffer: Buffer) {
        buffer.write(self.size);

        for entry in self {
            if entry.key {
                K::__serialize(buffer, entry.key);
                V::__serialize(buffer, entry.value);
            }
        }
    }

    dyn __deserialize_dyn(buffer: Buffer) {
        let size = buffer.read();
        let map = Map<K, V>::with_capacity(size);

        for i in 0..size {
            let key : K = K::__deserialize(buffer);
            let value : V = V::__deserialize(buffer);

            map.set(key, value);
        }

        self._set(map);
    }
}

class MapEntry<K, V> {
    key: K?,
    value: V?,
    next_entry_index: int?,

    clone() -> Self {
        self && Self { ..self }
    }
}