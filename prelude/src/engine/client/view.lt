export enum PointerBehavior {
    None,
    Visible,
    Opaque
}

export class View {
    _client: Client = Client::get(),
    _data: Object = none,
    _rect: Rect = none,
    _disabled: bool = false,
    _pointer_behavior: PointerBehavior = PointerBehavior::Visible,
    _parent: View = none,
    _rendered: bool = false,
    _graphics: Graphics = Graphics,
    _hovered_graphics: Graphics = none,
    _focused_graphics: Graphics = none,
    _disabled_graphics: Graphics = none,
    _children: View[] = [],
    _layouts: ViewLayout[] = []

    get_approximate_hash() -> int {
        let hash = self.__get_type_id()

        if self._data {
            hash = hash.hash_from(self._data.__as_ptr().__get_version());
        } else {
            let rect = self._rect;
            
            hash = hash
                .hash_from(rect.x.as_int())
                .hash_from(rect.y.as_int())
                .hash_from(rect.width.as_int())
                .hash_from(rect.height.as_int())
        }
            
        hash
    }

    client() -> Client? {
        self._client
    }

    rect() -> Rect {
        self._rect
    }

    children() -> View[] {
        self._children
    }

    data() -> Object {
        self._data
    }

    get_descendants<T>(callback: fn(View)(T)) -> T[] {
        let accumulator = CollectAccumulator<T> {
            result: [],
            callback
        };

        self._traverse(accumulator, (acc, view) => {
            let mapped = (accumulator.callback)(view);

            if mapped {
                acc.result.push(mapped);
            }
        });

        accumulator.result
    }

    get_ancestors() -> View[] {
        let result : View[] = [];
        let current = self;

        while current {
            result.push(current);
            current = current._parent;
        }

        result
    }

    _traverse<T>(acc: T, callback: fn(T, View)) {
        callback(acc, self);

        for child in self._children {
            child._traverse(acc, callback);
        }
    }

    render_child(object: Object, rect: Rect = none, view: View = none) -> Self {
        if object is View(as_view) {
            view = as_view;
            object = none;
        } else if object is ViewLayout(view_layout) {
            view = view_layout.root_view();
            object = none;
        }

        view = view.or_else(() => View);

        check view != self;

        if rect {
            view.set_rect(rect);
        } else if !view.rect() {
            view.set_rect(self._rect);
        }

        view._parent = self;
        self._children.push(view);
        self._client.render(object, rect, view);

        self
    }

    render_children(objects: Object[], rect: Rect = none) -> Self {
        for object in objects {
            self.render_child(object, rect);
        }

        self
    }

    last_child() -> View {
        self._children.last() || self
    }

    parent() -> View {
        self._parent
    }

    is_ancestor_of(view: View) -> bool {
        if !view {
            return false;
        }

        match view == self {
            true => true,
            false => self.is_ancestor_of(view._parent),
        }
    }

    is_descendant_of(view: View) -> bool {
        if !view {
            return false;
        }

        view.is_ancestor_of(self)
    }

    layout() -> ViewLayout {
        let layout = ViewLayout::new(self);
        self._layouts.push(layout);
        layout
    }

    render_layouts() {
        for layout in self._layouts {
            layout.render();
        }

        self._layouts.clear();
    }

    is_hovered() -> bool {
        self._client.hovered_views().includes(self)
    }

    is_focused() -> bool {
        self._client.focused_view() == self
    }

    is_dragged() -> bool {
        self._client.dragged_views().includes(self)
    }

    is_pressed() -> bool {
        self._client.pressed_views().includes(self)
    }

    focus() -> Self {
        self._client.focus(self);
        self
    }

    is_disabled() -> bool {
        self._disabled
    }

    set_data(object: Object) -> Self {
        self._data = object;
        self
    }

    set_disabled(value: bool) -> Self {
        self._disabled = value;
        self
    }

    set_pointer_behavior(value: PointerBehavior) -> Self {
        self._pointer_behavior = value;
        self
    }

    is_pointer_visible() -> bool {
        self._pointer_behavior != PointerBehavior::None
    }

    is_pointer_opaque() -> bool {
        self._pointer_behavior == PointerBehavior::Opaque
    }

    add_to_focus_chain() -> Self {
        self._client.add_to_focus_chain(self)
        self
    }

    scale(ratio: float) -> Self {
        self._rect = self._rect.scale(ratio);
        self
    }

    resize(width: float, height: float) -> Self {
        self._rect = self._rect.resize(width, height);
        self
    }

    strip_to_match_aspect_ratio(aspect_ratio: float) -> Self {
        self._rect = self._rect.strip_to_match_aspect_ratio(aspect_ratio);
        self
    }

    set_rect(rect: Rect) -> Self {
        self._rect = rect && rect.clone();
        self
    }

    set_size(width: float, height: float) -> Self {
        self._rect = Rect::from_size(width, height);
        self
    }

    has_same_rect(other: View) {
        self._rect == other._rect
    }

    mark_as_rendered() {
        self._rendered = true;
    }

    has_been_rendered() -> bool {
        self._rendered
    }

    _hovered_graphics() -> Graphics {
        if !self._hovered_graphics {
            self._hovered_graphics = Graphics::empty();
        }
        self._hovered_graphics
    }

    _focused_graphics() -> Graphics {
        if !self._focused_graphics {
            self._focused_graphics = Graphics::empty();
        }
        self._focused_graphics
    }

    _disabled_graphics() -> Graphics {
        if !self._disabled_graphics {
            self._disabled_graphics = Graphics::empty();
        }
        self._disabled_graphics
    }

    // GENERATION START

    shape(shape: Shape) -> Self { self._graphics.shape = shape; self }
    offset_x(offset_x: DisplaySize) -> Self { self._graphics.offset_x = offset_x; self }
    offset_y(offset_y: DisplaySize) -> Self { self._graphics.offset_y = offset_y; self }
    z_index(z_index: float) -> Self { self._graphics.z_index = z_index; self }
    horizontal_anchor(horizontal_anchor: HorizontalAlign) -> Self { self._graphics.horizontal_anchor = horizontal_anchor; self }
    vertical_anchor(vertical_anchor: VerticalAlign) -> Self { self._graphics.vertical_anchor = vertical_anchor; self }
    border_radius(border_radius: DisplaySize) -> Self { self._graphics.border_radius = border_radius; self }
    border_width(border_width: DisplaySize) -> Self { self._graphics.border_width = border_width; self }
    border_dash_length(border_dash_length: DisplaySize) -> Self { self._graphics.border_dash_length = border_dash_length; self }
    border_gap_length(border_gap_length: DisplaySize) -> Self { self._graphics.border_gap_length = border_gap_length; self }
    border_color(border_color: Color) -> Self { self._graphics.border_color = border_color; self }
    border_alpha(border_alpha: float) -> Self { self._graphics.border_alpha = border_alpha; self }
    background_color(background_color: Color) -> Self { self._graphics.background_color = background_color; self }
    background_alpha(background_alpha: float) -> Self { self._graphics.background_alpha = background_alpha; self }
    overlay_color(overlay_color: Color) -> Self { self._graphics.overlay_color = overlay_color; self }
    overlay_alpha(overlay_alpha: float) -> Self { self._graphics.overlay_alpha = overlay_alpha; self }
    image_url(image_url: string) -> Self { self._graphics.image_url = image_url; self }
    image_scale(image_scale: float) -> Self { self._graphics.image_scale = image_scale; self }
    image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self {
        self._graphics.image_sprite_count_per_row = image_sprite_count_per_row;
        self._graphics.image_sprite_count_per_column = image_sprite_count_per_column;
        self
    }
    image_sprite_index(image_sprite_index: int) -> Self { self._graphics.image_sprite_index = image_sprite_index; self }
    animation_start_time(animation_start_time: float) -> Self { self._graphics.animation_start_time = animation_start_time; self }
    animation_current_time(animation_current_time: float) -> Self { self._graphics.animation_current_time = animation_current_time; self }
    animation_duration(animation_duration: float) -> Self { self._graphics.animation_duration = animation_duration; self }
    text(text: string) -> Self { self._graphics.text = text; self }
    text_font(text_font: Font) -> Self { self._graphics.text_font = text_font; self }
    text_size(text_size: DisplaySize) -> Self { self._graphics.text_size = text_size; self }
    text_color(text_color: Color) -> Self { self._graphics.text_color = text_color; self }
    text_alpha(text_alpha: float) -> Self { self._graphics.text_alpha = text_alpha; self }
    text_padding(text_padding: DisplaySize) -> Self { self._graphics.text_padding = text_padding; self }
    text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._graphics.text_horizontal_align = text_horizontal_align; self }
    text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._graphics.text_vertical_align = text_vertical_align; self }
    text_bold(text_bold: bool) -> Self { self._graphics.text_bold = text_bold; self }
    text_italic(text_italic: bool) -> Self { self._graphics.text_italic = text_italic; self }
    text_cursor_index(text_cursor_index: int) -> Self { self._graphics.text_cursor_index = text_cursor_index; self }
    text_fit(text_fit: bool) -> Self { self._graphics.text_fit = text_fit; self }
    shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._graphics.shrink_to_fit_text = shrink_to_fit_text; self }
    cursor(cursor: Cursor) -> Self { self._graphics.cursor = cursor; self }

    hover_shape(shape: Shape) -> Self { self._hovered_graphics().shape = shape; self }
    hover_offset_x(offset_x: DisplaySize) -> Self { self._hovered_graphics().offset_x = offset_x; self }
    hover_offset_y(offset_y: DisplaySize) -> Self { self._hovered_graphics().offset_y = offset_y; self }
    hover_z_index(z_index: float) -> Self { self._hovered_graphics().z_index = z_index; self }
    hover_horizontal_anchor(horizontal_anchor: HorizontalAlign) -> Self { self._hovered_graphics().horizontal_anchor = horizontal_anchor; self }
    hover_vertical_anchor(vertical_anchor: VerticalAlign) -> Self { self._hovered_graphics().vertical_anchor = vertical_anchor; self }
    hover_border_radius(border_radius: DisplaySize) -> Self { self._hovered_graphics().border_radius = border_radius; self }
    hover_border_width(border_width: DisplaySize) -> Self { self._hovered_graphics().border_width = border_width; self }
    hover_border_dash_length(border_dash_length: DisplaySize) -> Self { self._hovered_graphics().border_dash_length = border_dash_length; self }
    hover_border_gap_length(border_gap_length: DisplaySize) -> Self { self._hovered_graphics().border_gap_length = border_gap_length; self }
    hover_border_color(border_color: Color) -> Self { self._hovered_graphics().border_color = border_color; self }
    hover_border_alpha(border_alpha: float) -> Self { self._hovered_graphics().border_alpha = border_alpha; self }
    hover_background_color(background_color: Color) -> Self { self._hovered_graphics().background_color = background_color; self }
    hover_background_alpha(background_alpha: float) -> Self { self._hovered_graphics().background_alpha = background_alpha; self }
    hover_overlay_color(overlay_color: Color) -> Self { self._hovered_graphics().overlay_color = overlay_color; self }
    hover_overlay_alpha(overlay_alpha: float) -> Self { self._hovered_graphics().overlay_alpha = overlay_alpha; self }
    hover_image_url(image_url: string) -> Self { self._hovered_graphics().image_url = image_url; self }
    hover_image_scale(image_scale: float) -> Self { self._hovered_graphics().image_scale = image_scale; self }
    hover_image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self {
        self._hovered_graphics().image_sprite_count_per_row = image_sprite_count_per_row;
        self._hovered_graphics().image_sprite_count_per_column = image_sprite_count_per_column;
        self
    }
    hover_image_sprite_index(image_sprite_index: int) -> Self { self._hovered_graphics().image_sprite_index = image_sprite_index; self }
    hover_animation_start_time(animation_start_time: float) -> Self { self._hovered_graphics().animation_start_time = animation_start_time; self }
    hover_animation_current_time(animation_current_time: float) -> Self { self._hovered_graphics().animation_current_time = animation_current_time; self }
    hover_animation_duration(animation_duration: float) -> Self { self._hovered_graphics().animation_duration = animation_duration; self }
    hover_text(text: string) -> Self { self._hovered_graphics().text = text; self }
    hover_text_font(text_font: Font) -> Self { self._hovered_graphics().text_font = text_font; self }
    hover_text_size(text_size: DisplaySize) -> Self { self._hovered_graphics().text_size = text_size; self }
    hover_text_color(text_color: Color) -> Self { self._hovered_graphics().text_color = text_color; self }
    hover_text_alpha(text_alpha: float) -> Self { self._hovered_graphics().text_alpha = text_alpha; self }
    hover_text_padding(text_padding: DisplaySize) -> Self { self._hovered_graphics().text_padding = text_padding; self }
    hover_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._hovered_graphics().text_horizontal_align = text_horizontal_align; self }
    hover_text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._hovered_graphics().text_vertical_align = text_vertical_align; self }
    hover_text_bold(text_bold: bool) -> Self { self._hovered_graphics().text_bold = text_bold; self }
    hover_text_italic(text_italic: bool) -> Self { self._hovered_graphics().text_italic = text_italic; self }
    hover_text_cursor_index(text_cursor_index: int) -> Self { self._hovered_graphics().text_cursor_index = text_cursor_index; self }
    hover_text_fit(text_fit: bool) -> Self { self._hovered_graphics().text_fit = text_fit; self }
    hover_shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._hovered_graphics().shrink_to_fit_text = shrink_to_fit_text; self }
    hover_cursor(cursor: Cursor) -> Self { self._hovered_graphics().cursor = cursor; self }

    focus_shape(shape: Shape) -> Self { self._focused_graphics().shape = shape; self }
    focus_offset_x(offset_x: DisplaySize) -> Self { self._focused_graphics().offset_x = offset_x; self }
    focus_offset_y(offset_y: DisplaySize) -> Self { self._focused_graphics().offset_y = offset_y; self }
    focus_z_index(z_index: float) -> Self { self._focused_graphics().z_index = z_index; self }
    focus_horizontal_anchor(horizontal_anchor: HorizontalAlign) -> Self { self._focused_graphics().horizontal_anchor = horizontal_anchor; self }
    focus_vertical_anchor(vertical_anchor: VerticalAlign) -> Self { self._focused_graphics().vertical_anchor = vertical_anchor; self }
    focus_border_radius(border_radius: DisplaySize) -> Self { self._focused_graphics().border_radius = border_radius; self }
    focus_border_width(border_width: DisplaySize) -> Self { self._focused_graphics().border_width = border_width; self }
    focus_border_dash_length(border_dash_length: DisplaySize) -> Self { self._focused_graphics().border_dash_length = border_dash_length; self }
    focus_border_gap_length(border_gap_length: DisplaySize) -> Self { self._focused_graphics().border_gap_length = border_gap_length; self }
    focus_border_color(border_color: Color) -> Self { self._focused_graphics().border_color = border_color; self }
    focus_border_alpha(border_alpha: float) -> Self { self._focused_graphics().border_alpha = border_alpha; self }
    focus_background_color(background_color: Color) -> Self { self._focused_graphics().background_color = background_color; self }
    focus_background_alpha(background_alpha: float) -> Self { self._focused_graphics().background_alpha = background_alpha; self }
    focus_overlay_color(overlay_color: Color) -> Self { self._focused_graphics().overlay_color = overlay_color; self }
    focus_overlay_alpha(overlay_alpha: float) -> Self { self._focused_graphics().overlay_alpha = overlay_alpha; self }
    focus_image_url(image_url: string) -> Self { self._focused_graphics().image_url = image_url; self }
    focus_image_scale(image_scale: float) -> Self { self._focused_graphics().image_scale = image_scale; self }
    focus_image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self {
        self._focused_graphics().image_sprite_count_per_row = image_sprite_count_per_row;
        self._focused_graphics().image_sprite_count_per_column = image_sprite_count_per_column;
        self
    }
    focus_image_sprite_index(image_sprite_index: int) -> Self { self._focused_graphics().image_sprite_index = image_sprite_index; self }
    focus_animation_start_time(animation_start_time: float) -> Self { self._focused_graphics().animation_start_time = animation_start_time; self }
    focus_animation_current_time(animation_current_time: float) -> Self { self._focused_graphics().animation_current_time = animation_current_time; self }
    focus_animation_duration(animation_duration: float) -> Self { self._focused_graphics().animation_duration = animation_duration; self }
    focus_text(text: string) -> Self { self._focused_graphics().text = text; self }
    focus_text_font(text_font: Font) -> Self { self._focused_graphics().text_font = text_font; self }
    focus_text_size(text_size: DisplaySize) -> Self { self._focused_graphics().text_size = text_size; self }
    focus_text_color(text_color: Color) -> Self { self._focused_graphics().text_color = text_color; self }
    focus_text_alpha(text_alpha: float) -> Self { self._focused_graphics().text_alpha = text_alpha; self }
    focus_text_padding(text_padding: DisplaySize) -> Self { self._focused_graphics().text_padding = text_padding; self }
    focus_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._focused_graphics().text_horizontal_align = text_horizontal_align; self }
    focus_text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._focused_graphics().text_vertical_align = text_vertical_align; self }
    focus_text_bold(text_bold: bool) -> Self { self._focused_graphics().text_bold = text_bold; self }
    focus_text_italic(text_italic: bool) -> Self { self._focused_graphics().text_italic = text_italic; self }
    focus_text_cursor_index(text_cursor_index: int) -> Self { self._focused_graphics().text_cursor_index = text_cursor_index; self }
    focus_text_fit(text_fit: bool) -> Self { self._focused_graphics().text_fit = text_fit; self }
    focus_shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._focused_graphics().shrink_to_fit_text = shrink_to_fit_text; self }
    focus_cursor(cursor: Cursor) -> Self { self._focused_graphics().cursor = cursor; self }

    disabled_shape(shape: Shape) -> Self { self._disabled_graphics().shape = shape; self }
    disabled_offset_x(offset_x: DisplaySize) -> Self { self._disabled_graphics().offset_x = offset_x; self }
    disabled_offset_y(offset_y: DisplaySize) -> Self { self._disabled_graphics().offset_y = offset_y; self }
    disabled_z_index(z_index: float) -> Self { self._disabled_graphics().z_index = z_index; self }
    disabled_horizontal_anchor(horizontal_anchor: HorizontalAlign) -> Self { self._disabled_graphics().horizontal_anchor = horizontal_anchor; self }
    disabled_vertical_anchor(vertical_anchor: VerticalAlign) -> Self { self._disabled_graphics().vertical_anchor = vertical_anchor; self }
    disabled_border_radius(border_radius: DisplaySize) -> Self { self._disabled_graphics().border_radius = border_radius; self }
    disabled_border_width(border_width: DisplaySize) -> Self { self._disabled_graphics().border_width = border_width; self }
    disabled_border_dash_length(border_dash_length: DisplaySize) -> Self { self._disabled_graphics().border_dash_length = border_dash_length; self }
    disabled_border_gap_length(border_gap_length: DisplaySize) -> Self { self._disabled_graphics().border_gap_length = border_gap_length; self }
    disabled_border_color(border_color: Color) -> Self { self._disabled_graphics().border_color = border_color; self }
    disabled_border_alpha(border_alpha: float) -> Self { self._disabled_graphics().border_alpha = border_alpha; self }
    disabled_background_color(background_color: Color) -> Self { self._disabled_graphics().background_color = background_color; self }
    disabled_background_alpha(background_alpha: float) -> Self { self._disabled_graphics().background_alpha = background_alpha; self }
    disabled_overlay_color(overlay_color: Color) -> Self { self._disabled_graphics().overlay_color = overlay_color; self }
    disabled_overlay_alpha(overlay_alpha: float) -> Self { self._disabled_graphics().overlay_alpha = overlay_alpha; self }
    disabled_image_url(image_url: string) -> Self { self._disabled_graphics().image_url = image_url; self }
    disabled_image_scale(image_scale: float) -> Self { self._disabled_graphics().image_scale = image_scale; self }
    disabled_image_layout(image_sprite_count_per_row: int, image_sprite_count_per_column: int) -> Self {
        self._disabled_graphics().image_sprite_count_per_row = image_sprite_count_per_row;
        self._disabled_graphics().image_sprite_count_per_column = image_sprite_count_per_column;
        self
    }
    disabled_image_sprite_index(image_sprite_index: int) -> Self { self._disabled_graphics().image_sprite_index = image_sprite_index; self }
    disabled_animation_start_time(animation_start_time: float) -> Self { self._disabled_graphics().animation_start_time = animation_start_time; self }
    disabled_animation_current_time(animation_current_time: float) -> Self { self._disabled_graphics().animation_current_time = animation_current_time; self }
    disabled_animation_duration(animation_duration: float) -> Self { self._disabled_graphics().animation_duration = animation_duration; self }
    disabled_text(text: string) -> Self { self._disabled_graphics().text = text; self }
    disabled_text_font(text_font: Font) -> Self { self._disabled_graphics().text_font = text_font; self }
    disabled_text_size(text_size: DisplaySize) -> Self { self._disabled_graphics().text_size = text_size; self }
    disabled_text_color(text_color: Color) -> Self { self._disabled_graphics().text_color = text_color; self }
    disabled_text_alpha(text_alpha: float) -> Self { self._disabled_graphics().text_alpha = text_alpha; self }
    disabled_text_padding(text_padding: DisplaySize) -> Self { self._disabled_graphics().text_padding = text_padding; self }
    disabled_text_horizontal_align(text_horizontal_align: HorizontalAlign) -> Self { self._disabled_graphics().text_horizontal_align = text_horizontal_align; self }
    disabled_text_vertical_align(text_vertical_align: VerticalAlign) -> Self { self._disabled_graphics().text_vertical_align = text_vertical_align; self }
    disabled_text_bold(text_bold: bool) -> Self { self._disabled_graphics().text_bold = text_bold; self }
    disabled_text_italic(text_italic: bool) -> Self { self._disabled_graphics().text_italic = text_italic; self }
    disabled_text_cursor_index(text_cursor_index: int) -> Self { self._disabled_graphics().text_cursor_index = text_cursor_index; self }
    disabled_text_fit(text_fit: bool) -> Self { self._disabled_graphics().text_fit = text_fit; self }
    disabled_shrink_to_fit_text(shrink_to_fit_text: bool) -> Self { self._disabled_graphics().shrink_to_fit_text = shrink_to_fit_text; self }
    disabled_cursor(cursor: Cursor) -> Self { self._disabled_graphics().cursor = cursor; self }

    // GENERATION STOP

    dyn __to_debug_string_dyn(set: Set<int>) -> string{
        "<VIEW>"
    }
}

fn push_callback<S, T>(owner: S, array: T[], value: T?) -> S {
    if value {
        array.push(value);
    }

    owner
}

class CollectAccumulator<T> {
    result: T[],
    callback: fn(View)(T)
}