pub class GameItemSelectionIcon {
    category_index: int,
    item_index: int,

    _is_selected(user: BlazeUser) -> bool {
        user.selected_game_items[self.category_index].includes(self.item_index)
    }

    @OnRender {
        let is_selected = self._is_selected(evt.user);
        let border_color = match is_selected {
            true => Color::red(),
            false => Color::black(),
        };

        evt.view
            .render_child(evt.user.game_items[self.category_index].items[self.item_index])
            .last_child()
            .border_color(border_color)
            .border_width(.04h)
            .border_radius(0.1m)
            .hover_cursor(Cursor::Pointer)
        
        // TODO: display selected count
    }

    @OnClick {
        check evt.button == MouseButton::Left && !evt.user.is_searching_for_game;

        let is_selected = self._is_selected(evt.user);
        let count = match is_selected {
            true => 0,
            false => 1,
        };

        evt.client.send_request(SelectItemRequest {
            category_index: self.category_index,
            item_index: self.item_index,
            count,
        });
    }

    // @OnMakeTooltip {
    //     evt.emit([self.item]);
        
    //     evt.view = View
    //         // .background_color(Color::white())
    //         // .set_size(400, 400);
    // }
}
