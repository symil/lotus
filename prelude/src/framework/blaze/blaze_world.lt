export class BlazeWorld {
    _game_items: GameItemCategory[] = [],
    _name_to_user: Map<string, #USER_TYPE> = Map::new(),
    _matchmaking_queue: MatchmakingQueue = MatchmakingQueue,

    set_game_items(game_items: GameItemCategory[]) {
        self._game_items = game_items.clone();
    }

    @OnWorldOpen {
        
    }

    @OnWorldUpdate {
        for users in self._matchmaking_queue.extract_groups() {
            let matchmaking_event = OnTriggerMatchmaking { ..evt, users };

            for user in users {
                user.is_searching_for_game = false;
            }

            matchmaking_event.emit([self]);
        }
    }

    @OnUserConnect {
        evt.user.game_items = self._game_items;
        evt.user.selected_game_items = int[][]::from_fill_function(self._game_items.len(), () => []);

        for [i, category] in self._game_items {
            if category.required_selected_item_count == 1 && !category.items.is_empty() {
                evt.user.selected_game_items[i].push(0);
            }
        }

        evt.user.is_connected = true;
    }

    @OnUserDisconnect {
        evt.user.is_connected = false;
    }

    @OnUserRequest {
        evt.emit([evt.request])
    }

    add_to_matchmaking(user: #USER_TYPE) {
        user.is_searching_for_game = true;
        self._matchmaking_queue.add([user]);
    }

    add_group_to_matchmaking(users: #USER_TYPE[]) {
        for user in users {
            user.is_searching_for_game = true;
        }

        self._matchmaking_queue.add(users);
    }

    remove_from_matchmaking(user: #USER_TYPE) {
        user.is_searching_for_game = false;
        self._matchmaking_queue.remove(user);
    }
}