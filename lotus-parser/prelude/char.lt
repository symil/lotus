export type(i32) char {
    eq(other: This) -> bool {{
        i32.eq
    }}

    ne(other: This) -> bool {{
        i32.ne
    }}

    to_int() -> int {{

    }}

    static __default() -> char {{
        (i32.const 0)
    }}

    static __none() -> char {{
        (i32.const -2147483648)
    }}

    __is_none() -> bool {{
        (i32.const -2147483648)
        (i32.eq)
    }}

    __hash() -> int {
        return (this as int).__hash();
    }

    static __chosen() -> char {
        return 's';
    }

    to_string() -> string {
        let str = string.__new(1);

        str.__set_char(0, this);

        return str;
    }

    to_debug_string(set: Set<ptr>) -> string {
        let c = this;

        if c == '\n' {
            return "'\\n'";
        } else if c == '\t' {
            return "'\\t'";
        } else if c == '\0' {
            return "'\\0'";
        } else if c == '\'' {
            return "'\\''";
        } else {
            let str = string.__new(3);

            str.__set_char(0, '\'');
            str.__set_char(1, c);
            str.__set_char(2, '\'');

            return str;
        }
    }
}