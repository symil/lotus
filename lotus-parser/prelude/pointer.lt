export type ptr = Pointer<int>;

export type(i32) Pointer<T> {
    type Item = T;

    static __default() -> This {{
        (i32.const 0)
    }}

    static __none() -> This {{
        (i32.const 0)
    }}

    __is_none() -> bool {{
        (i32.eqz)
    }}

    add(offset: int) -> This {
        return ((this as int) + offset) as This;
    }

    set_at(index: int, value: T) {
        let byte_index = ((this as int) + index) * 4;

        wasm_store(byte_index, value);
    }

    get_at(index: int) -> T {
        let byte_index = ((this as int) + index) * 4;

        return wasm_load(byte_index);
    }

    deref_get() -> T {
        return wasm_load((this as int) * 4);
    }

    print() {{
        (call $__log_int)
    }}

    copy_to(target: This, count: int) {
        mem_copy(target as ptr, this as ptr, count);
    }
}

