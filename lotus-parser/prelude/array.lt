sys fn __array_alloc(size: int) -> ptr {
    let capacity = size.next_power_of_4();
    let header = @alloc(4);
    let body = @alloc(capacity);

    header[0] = body as int;
    header[1] = size;
    header[2] = capacity;

    return header;
}

sys fn __array_get_item(array: ptr, index: int) -> int {
    return (array[0] as ptr)[index];
}

sys fn __array_set_item(value: int, array: ptr, index: int) {
    let body = array[0] as ptr;

    body[index] = value;
}

sys fn __array_get_length(array: ptr) -> int {
    return array[1];
}

sys fn __array_get_body(array: ptr) -> int {
    return array[0];
}

sys fn __array_push(array: ptr, value: int) -> ptr {
    let body = array[0] as ptr;
    let size = array[1];
    let capacity = array[2];

    if size == capacity {
        capacity *= 4;

        let new_body = @alloc(capacity);

        for i in 0..size {
            new_body[i] = body[i];
        }

        body = new_body;
        array[0] = body as int;
        array[2] = capacity;
    }

    body[size] = value;
    array[1] = size + 1;

    return array;
}

sys fn __array_pop(array: ptr) -> ptr {
    let size = array[1];

    if size > 0 {
        array[1] = size - 1;
    }

    return array;
}