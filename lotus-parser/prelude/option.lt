export type(T) Option<T> {
    type Item = T;

    static __default() -> This {
        return T.__none() as This;
    }

    static __none() -> This {
        return T.__none() as This;
    }

    // print() {
    //     if this.__is_none() {
    //         @log("none");
    //     } else {
    //         @log(this as T);
    //     }
    // }

    eq(other: This) -> bool {
        return (this as T) == (other as T);
    }

    ne(other: This) -> bool {
        return (this as T) != (other as T);
    }

    unwrap() -> T {{

    }}
}