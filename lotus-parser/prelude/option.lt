export type(T) Option<T> {
    type Item = T;

    static __default() -> This {
        return T.__none() as This;
    }

    static __none() -> This {
        return T.__none() as This;
    }

    is_none() -> bool {
        return (this as T).__is_none();
    }

    is_some() -> bool {
        return !this.is_none();
    }

    to_string() -> string {
        if this.__is_none() {
            return "none";
        } else {
            return (this as T).to_string();
        }
    }

    to_debug_string(set: Set<ptr>) -> string {
        if this.__is_none() {
            return "none";
        } else {
            return (this as T).to_debug_string(set);
        }
    }

    eq(other: This) -> bool {
        return (this as T) == (other as T);
    }

    ne(other: This) -> bool {
        return (this as T) != (other as T);
    }

    unwrap() -> T {{

    }}

    __retain() {
        if this.is_some() {
            (this as T).__retain();
        }
    }

    __serialize(buffer: Buffer) {
        if this.is_none() {
            buffer.push(T.__none() as int);
        } else {
            (this as T).__serialize(buffer);
        }
    }
}