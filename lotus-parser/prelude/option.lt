export type(T) Option<T> {
    type Item = T;

    static __default() -> This {
        return This.none();
    }

    static __none() -> This {
        return This.none();
    }

    __is_none() -> bool {
        return this.is_none();
    }

    static some(arg: T) -> This {{
        
    }}

    static none() -> This {
        return T.__none() as This;
    }

    is_none() -> bool {
        return (this as T).__is_none();
    }

    is_some() -> bool {
        return !(this as T).__is_none();
    }

    unwrap() -> T {{

    }}

    to_bool() -> bool {
        return this.is_some();
    }
}