[X] Merge to master
[X] Dynamic methods
[X] #TYPE_ID macro
[X] Null values
[X] Field default values
[X] Stack type of `Option`
[X] Fix default values of non-option fields
[X] Fix dynamic methods/generic types interaction (best thing is likely to pass `this` last)
[X] Add `to_string()`/`to_debug_string()` everywhere
[X] `Set`/`Map`
[X] Prevent cycles in `to_debug_string()`
[X] Add `retain`
[X] Add `serialize`
[X] Add `#ANCESTOR_ID`
[X] Keyword to try to convert variable to another type (e.g `object` -> `Foo`)
[X] Add `deserialize`
[X] Single variable field initialization (e.g `Foo { value }` instead of `Foo { value: value }`)
[X] Allow dynamic user methods to override dynamic autogen methods
[X] Allow user to override the `default` method
[X] Allow `||` and `&&` to return other types than `bool`
[X] `Color` type
[X] Enum types
[X] `match` keyword
[X] Add `retain`, `serialize`, `deserialize`, `to_string`, `to_debug_string` methods for enums
[X] `Size` type
[X] Rework number literal
[X] Use `::` to access static methods/fields instead of `.`
[X] Add `Pair`
[X] `Rect` type
[X] Retain global variables during garbage collection
[X] Make so `match` can be used on objects
[X] `void` builtin type
[X] Specify type in `drop` instruction
[X] Create 2 binaries when relevant
[X] Optional signature in `dyn` methods
[X] `view` type qualifier
[X] Functions as types
[X] Blocks as expressions
[X] `match` with booleans
[X] Make so variables are modifiable after their declaration in the compiler
[X] Anonymous functions
[X] Closures
[X] Add garbage collection for closures
[X] `fn() -> int` => `fn()(int)`
[X] Fix interaction between `for` loops and closures
[X] `check` keyword
[X] Event system
[X] `sort` method for arrays
[X] Allow creating objects without the brackets when no field is specified (`Foo` instead of `Foo {}`)
[X] Spread operator in object initialization
[X] Remove the `dyn` keyword (automatically infer whether a method is dynamic or not)
[X] Add variable name when using `is` keyword
[X] Make `this.a.__retain()` a no-op if `a` if not on the heap, instead of loading `a` on the stack and doing nothing with it
[X] Infer `Window`, `User`, `World` and `LocalData` types
[X] Add template strings (e.g: `value: ${object.value}`)
[X] `intercept` keyword
[X] `yield` keyword
[X] Make `Array<A>` assignable to `Array<Object>`
[X] `this` -> `self`
[X] Window events
[X] Draw primitives
[X] Rework macros
[X] Client update loop
[X] Networking
[X] File system
[X] Server update loop
[X] Refactor to allow specifying a mode to the compiler
[X] Integrate compilation errors to VS code extension
[X] Add variable/function/field/method/type renaming
[X] Add variable type on hover
[X] Add goto variable/function/field/method/type definition
[X] Make so the language server runs in the background during code edition
[X] Add proper variable destructuring (e.g allow `for (key, value) in map.entries()`)
[X] Wrap `Type` and `Signature` in `Rc` to reduce cloning cost
[X] Change how `Vasm` are specified, use chaining instead of list of instructions
[X] Make so `Vasm` are not populated when unnecessary
[X] Cache parsed files that didn't change since last parsing
[X] Split regular methods and event callbacks during processing step
[X] Add variable autocompletion suggestions
[X] Add field/method autocompletion suggestions when pressing `.`
[X] Add static field/method autocompletion suggestions when pressing `::`
[X] Add system methods autocompletion suggestions when pressing `@`
[X] Add events autocompletion suggestions when pressing `@`
[X] Add autocompletion for types
[X] Add class `Event`
[X] Clean internal method names
[X] Fix error highlighting when function doesn't return the right type
[X] Add `<â€¦>` in completion label of types with parameters
[X] Properly insert arguments of parameterized types during autocompletion
[X] Properly insert arguments of functions/methods during autocompletion
[X] Fix closures that use variables created by the `is` keyword
[X] Remove possibility to specify only the type of arguments in function signature
[X] Move color constants to static methods
[X] Type hints for binary operators
[X] Separate renaming, hover and goto definition
[X] Add autocompletion for interfaces (when required for type parameter)
[X] Determine for each type of the prelude if it should be exported or not
[X] Show function argument info when typing
[X] Add icon for lotus files
[X] Make so external wasm functions can be imported via lotus
[X] Add extension setting to select compiler
[X] Do not insert function arguments if they are already there
[X] Prefix all items with `Parsed`
[X] Allow to specify argument types in anonymous functions
[X] Allow to not specify all expected arguments in anonymous functions
[X] Setting to disable language server
[X] Add enum variants/static methods/true/false/none in completion list when they match the expected type
[X] Handle completion item order in language server
[X] Integrate autocompletion commands to language server
[X] Improve `match` block
[X] Add versioning to allocated pointers
[X] Validate a single time after multiple files have been saved
[X] Command to add all enum variants to a `match` block
[X] Make internal methods show up when working on the prelude
[X] Allow client to reference server objects with their addresses
[X] Rename `DataLocation` into `ItemLocation`
[X] Investigate memory leak
[X] Randomize pointer version when they are first allocated
[X] Add autocompletion on field name when constructing an object
[X] Option to skip parsing of successive `Option` items if one fails
[X] Allow to specify default values for parent class fields
[X] Improve `extends` autocompletion
[X] Improve `for` loop autocompletion
[X] Convenience type to create simple tokens
[X] Convenience type to create flexible tokens
[X] Reload language server after compilation
[X] Add time in language server logs
[X] Improve completion on type declarations
[X] Add a `location()` method to parsable structs and enums
[X] Use serialization with schema when storing items with file system
[X] Add local storage api
[X] Add script to start http server in build
[X] Prevent http clients from accessing private server files
[X] Allocate literal strings a single time
[X] Use outpost as build system
[X] Copy config file to server during build
[X] Differenciate between public, private and internal fields/methods
[X] Make so spread operator only copies public fields

-- LATER --
[ ] Allow manually specifying function parameters
[ ] One-liner methods
[ ] Avoid recomputing the full path when using operation-assigment operators (e.g `a.b.c.d += 4` should not compute `a.b.c` twice)
[ ] Compute constants value at compile time when possible
[ ] Make `self` available in field default values
[ ] Add type parameter inference
[ ] Improve variable type inference according to their first use
[ ] Change the `?` suffix operator to return `none` if the expression it is applied to is `none`
[ ] Optimize `&&` and `||` when applied to boolean operands
[ ] Think of a way to loosen the restrictions on basic operators (e.g `3f * 2` sould work) (operator overloading?)
[ ] Encode errors in enum instead of hard-writting them
[ ] Reduce size of generated wat by merging functions that have exactly the same body
[ ] Unify function & value types (probably by introducing function overloading + `()` operator?)
[ ] Allow `@alloc` to return exactly 1 `i32`
[ ] Allow chaining function calls (e.g `a()()()`)
[ ] Improve `Link::borrow()`
[ ] Add `assert` macro or equivalent to do tests (and ensure everything is fine in prod)
[ ] Add stack trace somehow
[ ] Re-use temporary wasm variables when possible
[ ] Detect unreachable path and adapt the return type of a block
[ ] Add a way to specify a `_init` method for objects, that will be run after an object is constructed
[ ] `if let` expression
[ ] Merge the way fields and methods are processed
[ ] Possibility to specify fields in interface
[ ] Solve the `none` issue when accessing fields/methods (should every field/method accessed be checked?)
[ ] Implement proper iterators
[ ] Improve interface system (basically copy the one from rust)
[ ] Generalize tuples
[ ] Change how interface are implemented to explicitely specify which interface is specified
[ ] Make VS code extension ignore errors from files with a `// ignore-errors` comment
[ ] Merge `TypeBlueprint` and `InterfaceBlueprint`
[ ] Make so language server features are not enabled in standard mode
[ ] Make builtin interfaces internal by prefixing them with `__`
[ ] Syntax highlighting: properly highlight types that starts with `_`
[ ] Add autocompletion for macros
[ ] Sort errors by location in the console
[ ] Add parsing for types/interfaces/functions/methods documentation
[ ] Improve performance of source files processing
[ ] Improve performance of wasm generation
[ ] Add better syntax highlighting from language server (https://code.visualstudio.com/api/references/vscode-api#DocumentSemanticTokensProvider)
[ ] Have different types for `DisplaySize`?
[ ] Better handle the `as` operation (properly convert to/from `f32` and to/from `void`)
[ ] Allow multiple constants to be specified in a `match` branch item
[ ] Replace references to constants with their actual value when possible
[ ] Introduce variables immutability
[ ] Display error when number literal is invalid
[ ] Common type `any`
[ ] Method `or` on `any` type
[ ] Regular expressions
[ ] Function default arguments
[ ] Add `fill class fields` code action
[ ] Use global attributes to specify whether to implement `Debug` and `location` by default or not
[ ] Improve schema serialization to keep info about the object class (use class name as key?)
[ ] Compute string hash during string creation
[ ] Fix serialization with schema for arrays/objects (what happens when an array field becomes a non-array field? or vice-versa)
[ ] Fix interaction when A defines a dyn autogen method, and B inherits from A and redefines the same autogen dyn method
[ ] Add completion for dynamic method names
[ ] Add completion for type parameters
[ ] Signature help: correctly infer type parameters (`Array<int>.push()` should display `int` instead of `T`)
[ ] Fix structure of compiler/cli (merge them?)

-- COMMON ITERATOR METHODS --
enumerate, zip, rev